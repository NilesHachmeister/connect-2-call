{"version":3,"sources":["utils/mutations.js","utils/auth.js","components/NewPostForm.js","App.js","index.js"],"names":["ADD_POST","gql","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","NewPostForm","useState","taskTitle","callLanguage","description","callCategory","payment","callTime","phoneNumberToCall","postFormData","setPostFormData","useMutation","addPost","error","validated","showAlert","setShowAlert","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","currentTarget","checkValidity","stopPropagation","loggedUser","Auth","getProfile","variables","postUser","data","_id","console","log","Error","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","Button","disabled","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbbe3338.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n\r\nexport const ADD_POST = gql`\r\n  mutation addPost($taskTitle: String!, $callLanguage: String!, $description: String!, $callCategory: String, $payment: String!, $callTime: String!, $phoneNumberToCall: String!, $postUser: String!) {\r\n    addPost(taskTitle: $taskTitle, callLanguage: $callLanguage, description: $description, callCategory: $callCategory, payment: $payment, callTime: $callTime, phoneNumberToCall: $phoneNumberToCall, postUser: $postUser ) {\r\n      \r\n        _id\r\n        taskTitle\r\n        callLanguage\r\n        description\r\n        callCategory\r\n        payment\r\n        callTime\r\n        phoneNumberToCall\r\n    postUser\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\nmutation AddUser($name: String!, $email: String!, $password: String!, $siteLanguage: String!, $spokenLanguage: String!, $isCaller: Boolean!) {\r\n  addUser(name: $name, email: $email, password: $password, siteLanguage: $siteLanguage, spokenLanguage: $spokenLanguage, isCaller: $isCaller) {\r\n       user {\r\n        _id\r\n        name\r\n        email\r\n        password\r\n        siteLanguage\r\n        spokenLanguage\r\n        isCaller\r\n        category\r\n      }\r\n      token\r\n  }\r\n}`;","// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { useMutation } from '@apollo/client';\r\nimport Auth from '../utils/auth'\r\nimport { ADD_POST } from '../utils/mutations';\r\n\r\n\r\n// import Auth from '../utils/auth';\r\n\r\nconst NewPostForm = () => {\r\n    // set initial form state\r\n    const [postFormData, setPostFormData] = useState({ taskTitle: '', callLanguage: '', description: '', callCategory: '', payment: '', callTime: '', phoneNumberToCall: '', });\r\n    const [addPost, { error }] = useMutation(ADD_POST);\r\n    // set state for form validation\r\n    const [validated] = useState(true);\r\n    // set state for alert\r\n    const [showAlert, setShowAlert] = useState(false);\r\n\r\n\r\n\r\n    const handleInputChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setPostFormData({ ...postFormData, [name]: value });\r\n    };\r\n\r\n    const handleFormSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // check if form has everything (as per react-bootstrap docs)\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n\r\n        const loggedUser = Auth.getProfile()\r\n\r\n\r\n        try {\r\n            const { data } = await addPost({\r\n                variables: { ...postFormData, postUser: loggedUser.data._id }\r\n            });\r\n            console.log(data);\r\n\r\n            if (error) {\r\n                throw new Error('something went wrong!');\r\n            }\r\n\r\n            // const { token, user } = await response.json();\r\n            // console.log(user);\r\n            // Auth.login(data.addPost.token);\r\n\r\n\r\n\r\n        } catch (err) {\r\n            console.error(err);\r\n            setShowAlert(true);\r\n        }\r\n\r\n        setPostFormData({\r\n            taskTitle: '',\r\n            callLanguage: '',\r\n            description: '',\r\n            callCategory: '',\r\n            payment: '',\r\n            callTime: '',\r\n            phoneNumberToCall: '',\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* This is needed for the validation functionality above */}\r\n            <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n                {/* show alert if server response is bad */}\r\n                <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n                    Something went wrong with your signup!\r\n                </Alert>\r\n\r\n                <Form.Group>\r\n                    <Form.Label htmlFor='taskTitle'>taskTitle</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='taskTitle'\r\n                        name='taskTitle'\r\n                        onChange={handleInputChange}\r\n                        value={postFormData.taskTitle}\r\n                        required\r\n                    />\r\n                    <Form.Control.Feedback type='invalid'>taskTitle is required!</Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label htmlFor='callLanguage'> callLanguage</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='callLanguage'\r\n                        name='callLanguage'\r\n                        onChange={handleInputChange}\r\n                        value={postFormData.callLanguage}\r\n                        required\r\n                    />\r\n                    <Form.Control.Feedback type='invalid'> callLanguage is required!</Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label htmlFor='description'>description</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='description'\r\n                        name='description'\r\n                        onChange={handleInputChange}\r\n                        value={postFormData.description}\r\n                        required\r\n                    />\r\n                    <Form.Control.Feedback type='invalid'>description is required!</Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label htmlFor='callCategory'>callCategory</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='callCategory'\r\n                        name='callCategory'\r\n                        onChange={handleInputChange}\r\n                        value={postFormData.callCategory}\r\n                        required\r\n                    />\r\n                    <Form.Control.Feedback type='invalid'>callCategory is required!</Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label htmlFor='payment'>payment</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='payment'\r\n                        name='payment'\r\n                        onChange={handleInputChange}\r\n                        value={postFormData.payment}\r\n                        required\r\n                    />\r\n                    <Form.Control.Feedback type='invalid'>payment is required!</Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n\r\n\r\n                <Form.Group>\r\n                    <Form.Label htmlFor='callTime'>callTime</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='callTime'\r\n                        name='callTime'\r\n                        onChange={handleInputChange}\r\n                        value={postFormData.callTime}\r\n                        required\r\n                    />\r\n                    <Form.Control.Feedback type='invalid'>callTime is required!</Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n\r\n\r\n                <Form.Group>\r\n                    <Form.Label htmlFor='phoneNumberToCall'>phoneNumberToCall</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='phoneNumberToCall'\r\n                        name='phoneNumberToCall'\r\n                        onChange={handleInputChange}\r\n                        value={postFormData.phoneNumberToCall}\r\n                        required\r\n                    />\r\n                    <Form.Control.Feedback type='invalid'>phoneNumberToCall is required!</Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n\r\n\r\n                <Button\r\n                    disabled={!(postFormData.taskTitle && postFormData.callLanguage && postFormData.description)}\r\n                    type='submit'\r\n                    variant='success'>\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NewPostForm;","import React from 'react';\r\nimport {\r\n    ApolloClient,\r\n    InMemoryCache,\r\n    ApolloProvider,\r\n    createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport SignupForm from './components/SignupForm';\r\nimport NewPostForm from './components/NewPostForm';\r\n\r\n\r\n\r\nconst httpLink = createHttpLink({\r\n    uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n    const token = localStorage.getItem('id_token');\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            authorization: token ? `Bearer ${token}` : '',\r\n        },\r\n    };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache(),\r\n});\r\n\r\n\r\n// landing page\r\n\r\n// login/sign up\r\n\r\n// dashboard for caller full of posts\r\n\r\n// if noncaller - create new post option and posts already created\r\n\r\n// comments \r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <ApolloProvider client={client}>\r\n            <Router>\r\n\r\n                <NewPostForm />\r\n\r\n            </Router>\r\n        </ApolloProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n// did we want to have a service worker? Anyone feel strong in making one?\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.register();\r\n"],"sourceRoot":""}