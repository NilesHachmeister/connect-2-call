{"version":3,"sources":["assets/pattern2.jpeg","utils/mutations.js","utils/auth.js","components/SignupForm.js","utils/emailValidation.js","components/LoginForm.js","components/Header.js","assets/card6.jpeg","assets/card3.jpeg","assets/card4.jpeg","assets/card13.jpeg","components/InfoCards.js","assets/new-header.jpg","assets/newsignup.jpeg","components/Home.js","components/Footer.js","pages/signUpPage.js","pages/home-page.js","components/NewPostForm.js","utils/queries.js","components/Card.js","components/YourBoard.js","pages/board.js","App.js","index.js"],"names":["LOGIN_USER","gql","ADD_POST","ADD_USER","ADD_COMMENT","DELETE_POST","TOGGLE_COMPLETE","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","SignupForm","useState","username","email","password","siteLanguage","spokenLanguage","isCaller","userFormData","setUserFormData","useMutation","addUser","error","usernameValidate","setUsernameValidate","emailValidate","setEmailValidate","passwordValidate","setPasswordValidate","spokenLanguageValidate","setSpokenLanguageValidate","showAlert","setShowAlert","handleInputChange","event","target","name","value","split","length","match","handleFormSubmit","preventDefault","currentTarget","variables","data","console","log","Error","Auth","login","style","backgroundImage","pattern2","className","Form","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","Button","disabled","LoginForm","validated","loginUser","checkValidity","stopPropagation","noValidate","Header","href","Info","id","src","card6","alt","card3","card4","card13","Home","width","paddingLeft","class","signUp","Footer","SignUpPage","content","setContent","currentPage","changeFunction","MainHomePage","NewPostForm","taskTitle","callLanguage","description","callCategory","payment","callTime","phoneNumberToCall","postFormData","setPostFormData","addPost","loggedUser","getProfile","postUser","_id","GET_POSTS","Card","useQuery","loading","deleteThisPost","deleteError","commentText","postId","commentFormData","setCommentFormData","addComment","toggleComplete","showDeleteAlert","setDeleteShowAlert","deletePostIdState","setDeletePostIdState","deletePost","dataset","user","commentAuthorId","postid","commentAuthor","toggleAPostCompleted","posts","map","element","index","createdAt","onClick","completed","comments","comment","role","tabIndex","YourBoard","card","setCard","completeCardItem","updatedCard","item","isComplete","removeCardItem","filter","editCardItem","itemId","newValue","text","prev","boardPage","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6624009d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pattern2.7d5dfb58.jpeg\";","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\n\n\nexport const ADD_POST = gql`\n  mutation addPost($taskTitle: String!, $callLanguage: String!, $description: String!, $callCategory: String, $payment: String!, $callTime: String!, $phoneNumberToCall: String!, $postUser: String!) {\n    addPost(taskTitle: $taskTitle, callLanguage: $callLanguage, description: $description, callCategory: $callCategory, payment: $payment, callTime: $callTime, phoneNumberToCall: $phoneNumberToCall, postUser: $postUser ) {\n        _id\n        taskTitle\n        callLanguage\n        description\n        callCategory\n        payment\n        callTime\n        phoneNumberToCall\n       postUser\n\n      \n    }\n  }\n`;\n\nexport const ADD_USER = gql`\nmutation AddUser($username: String!, $email: String!, $password: String!, $siteLanguage: String, $spokenLanguage: String!, $isCaller: Boolean!) {\n  addUser(username: $username, email: $email, password: $password, siteLanguage: $siteLanguage, spokenLanguage: $spokenLanguage, isCaller: $isCaller) {\n       user {\n        _id\n        username\n        email\n        password\n        siteLanguage\n        spokenLanguage\n        isCaller\n      }\n      token\n  }\n}`;\n\n\nexport const ADD_COMMENT = gql`\nmutation AddComment($postId: String!, $commentText: String!, $commentAuthor: String!) {\n  addComment(postId: $postId, commentText: $commentText, commentAuthor: $commentAuthor) {\n    comments {\n      commentAuthor {\n        _id\n      }\n    }\n  }\n}`;\n\nexport const DELETE_POST = gql`\nmutation DeletePost($postId: String!) {\n  deletePost(postId: $postId) {\n   _id\n  }\n}`;\n\nexport const TOGGLE_COMPLETE = gql`\nmutation Mutation($postId: ID!) {\n  markAsCompleted(postId: $postId) {\n    _id\n  }\n}`;\n\n\n\n\n\n","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/board');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport pattern2 from '../assets/pattern2.jpeg';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { emailValidation } from '../utils/emailValidation';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '', siteLanguage: '', spokenLanguage: '', isCaller: false });\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n\n\n  const [usernameValidate, setUsernameValidate] = useState(false);\n  const [emailValidate, setEmailValidate] = useState(false);\n  const [passwordValidate, setPasswordValidate] = useState(false);\n  const [spokenLanguageValidate, setSpokenLanguageValidate] = useState(false);\n\n\n\n\n  const [showAlert, setShowAlert] = useState(false);\n\n\n\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n\n\n\n    if (userFormData.username.split(\"\").length >= 4) {\n      setUsernameValidate(true)\n    } else {\n      setUsernameValidate(false)\n    }\n    if (emailValidation(userFormData.email)) {\n      setEmailValidate(true)\n    } else {\n      setEmailValidate(false)\n    }\n\n    if (userFormData.password.split(\"\").length >= 4) {\n      setPasswordValidate(true)\n    } else {\n      setPasswordValidate(false)\n    }\n    if (userFormData.spokenLanguage.split(\"\").length >= 2) {\n      setSpokenLanguageValidate(true)\n    } else {\n      setSpokenLanguageValidate(false)\n    }\n\n\n\n\n  };\n\n  const booleanChange = (event) => {\n    const { name } = event.target;\n    setUserFormData({ ...userFormData, [name]: !userFormData.isCaller })\n    console.log(userFormData.isCaller)\n  }\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData }\n      });\n      console.log(data);\n\n      if (error) {\n        throw new Error('something went wrong!');\n      }\n\n\n      Auth.login(data.addUser.token);\n\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n      siteLanguage: '',\n      spokenLanguage: '',\n      isCaller: false,\n    });\n  };\n\n  return (\n    <>\n      <div style={{ backgroundImage: `url(${pattern2})` }}>\n        <div className=\"sign-up-form\">\n          <h1>Happy To Have You!</h1>\n          <br></br>\n          {/* This is needed for the validation functionality above */}\n          <Form onSubmit={handleFormSubmit}>\n            {/* show alert if server response is bad */}\n            <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n              Something went wrong with your signup!\n            </Alert>\n\n            <Form.Group>\n              <Form.Label htmlFor='username'>Username:</Form.Label>\n              <br></br>\n              <Form.Control\n                type='text'\n                placeholder='YOUR USERNAME'\n                name='username'\n                onChange={handleInputChange}\n                value={userFormData.username}\n                required\n              />\n              <Form.Control.Feedback type='invalid'>{!usernameValidate ? \"Username must be 5 characters or more\" : \"\"}</Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label htmlFor='email'>Email:</Form.Label>\n              <br></br>\n              <Form.Control\n                type='email'\n                placeholder='EMAIL ADDRESS'\n                name='email'\n                onChange={handleInputChange}\n                value={userFormData.email}\n                required\n              />\n              <Form.Control.Feedback type='invalid'>{!emailValidate ? \"Must be a valid email\" : \"\"}</Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label htmlFor='password'>Password:</Form.Label>\n              <br></br>\n              <Form.Control\n                type='password'\n                placeholder='PASSWORD'\n                name='password'\n                onChange={handleInputChange}\n                value={userFormData.password}\n                required\n              />\n              <Form.Control.Feedback type='invalid'>{!passwordValidate ? \"Password must be 5 characters or more\" : \"\"}</Form.Control.Feedback>\n            </Form.Group>\n\n            {/* <Form.Group>\n              <Form.Label htmlFor='siteLanguage'>siteLanguage</Form.Label>\n              <Form.Control\n                type='text'\n                placeholder='siteLanguage'\n                name='siteLanguage'\n                onChange={handleInputChange}\n                value={userFormData.siteLanguage}\n                required\n              />\n              <Form.Control.Feedback type='invalid'>Site Language Preference is required.</Form.Control.Feedback>\n            </Form.Group> */}\n\n            <Form.Group>\n              <Form.Label htmlFor='spokenLanguage'>Spoken Language:\n                <select>\n                  <option value=\"en\">English</option>\n                  <option value=\"sp\">Español</option>\n                  <option value=\"fr\">Français</option>\n                  <option value=\"br\">Беларускі</option>\n                  <option value=\"ru\">Русский</option>\n\n                </select></Form.Label>\n              <br></br>\n              {/* <Form.Control\n                type='text'\n                placeholder='SPOKEN LANGUAGE'\n                name='spokenLanguage'\n                onChange={handleInputChange}\n                value={userFormData.spokenLanguage}\n                required\n              /> */}\n              <Form.Control.Feedback type='invalid'>{!spokenLanguageValidate ? \"Please enter languages you speak\" : \"\"}</Form.Control.Feedback>\n            </Form.Group>\n\n\n            <Form.Group>\n              <Form.Label htmlFor='isCaller'>I will be making calls.</Form.Label>\n              <br></br>\n              <Form.Control\n                type='checkbox'\n                name='isCaller'\n                onChange={booleanChange}\n              // value={userFormData.isCaller}\n              />\n              <br></br>\n              <h11>Yes!</h11>\n              <br></br>\n              <br></br>\n            </Form.Group>\n\n\n\n            <Button\n              disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n              type='submit'\n              variant='success'>\n              Submit\n            </Button>\n          </Form>\n        </div>\n        <footer className=\"footer2\">\n          <p className=\"copyright\">Connect 2 Call © 2022</p>\n        </footer>\n      </div>\n\n    </>\n  );\n};\n\nexport default SignupForm;","export const emailValidation = (email) => {\r\n    let regexEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n    if (email.match(regexEmail)) {\r\n        return true\r\n    }\r\n    return false\r\n}","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { LOGIN_USER } from '../utils/mutations';\nimport { useMutation } from '@apollo/react-hooks';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '', username: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [loginUser] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await loginUser({\n        variables: { ...userFormData }\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <h1>Welcome Back!</h1>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignupForm from './SignupForm';\nimport LoginForm from './LoginForm';\nimport Auth from '../utils/auth';\nimport '../homepg.css';\n\n\nconst Header = () => {\n\n  return (\n    <>\n      <header>\n        <div className=\"header\">\n         \n            <a className=\"button\" href=\"/\">\n              Home\n            </a>\n            <a className=\"button\" href=\"/\">\n              Login\n            </a>\n            <a className=\"button\" href=\"/signupform\">\n              Sign Up\n            </a>\n          </div>\n    \n      </header>\n\n    </>\n  );\n}\n\nexport default Header;\n\n\n// const AppNavbar = () => {\n//   // set modal display state\n//   const [showModal, setShowModal] = useState(false);\n\n//   return (\n//     <>\n//       <Navbar bg='dark' variant='dark' expand='lg'>\n//         <Container fluid>\n//           <Navbar.Brand as={Link} to='/'>\n//             Google Books Search\n//           </Navbar.Brand>\n//           <Navbar.Toggle aria-controls='navbar' />\n//           <Navbar.Collapse id='navbar'>\n//             <Nav classNameName='ml-auto'>\n//               <Nav.Link as={Link} to='/'>\n//                 Search For Books\n//               </Nav.Link>\n//               {/* if user is logged in show saved books and logout */}\n//               {Auth.loggedIn() ? (\n//                 <>\n//                   <Nav.Link as={Link} to='/saved'>\n//                     See Your Books\n//                   </Nav.Link>\n//                   <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n//                 </>\n//               ) : (\n//                 <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n//               )}\n//             </Nav>\n//           </Navbar.Collapse>\n//         </Container>\n//       </Navbar>\n//       {/* set modal data up */}\n//       <Modal\n//         size='lg'\n//         show={showModal}\n//         onHide={() => setShowModal(false)}\n//         aria-labelledby='signup-modal'>\n//         {/* tab container to do either signup or login component */}\n//         <Tab.Container defaultActiveKey='login'>\n//           <Modal.Header closeButton>\n//             <Modal.Title id='signup-modal'>\n//               <Nav variant='pills'>\n//                 <Nav.Item>\n//                   <Nav.Link eventKey='login'>Login</Nav.Link>\n//                 </Nav.Item>\n//                 <Nav.Item>\n//                   <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n//                 </Nav.Item>\n//               </Nav>\n//             </Modal.Title>\n//           </Modal.Header>\n//           <Modal.Body>\n//             <Tab.Content>\n//               <Tab.Pane eventKey='login'>\n//                 <LoginForm handleModalClose={() => setShowModal(false)} />\n//               </Tab.Pane>\n//               <Tab.Pane eventKey='signup'>\n//                 <SignupForm handleModalClose={() => setShowModal(false)} />\n//               </Tab.Pane>\n//             </Tab.Content>\n//           </Modal.Body>\n//         </Tab.Container>\n//       </Modal>\n//     </>\n//   );\n// };\n\n// export default AppNavbar;\n","export default __webpack_public_path__ + \"static/media/card6.9d451640.jpeg\";","export default __webpack_public_path__ + \"static/media/card3.7f5e9a03.jpeg\";","export default __webpack_public_path__ + \"static/media/card4.7be25e8f.jpeg\";","export default __webpack_public_path__ + \"static/media/card13.0457a26e.jpeg\";","import React from \"react\";\nimport \"../homepg.css\";\nimport card6 from '../assets/card6.jpeg'\nimport card3 from '../assets/card3.jpeg'\nimport card4 from '../assets/card4.jpeg'\nimport card13 from '../assets/card13.jpeg'\n\nexport default function Info() {\n    return (\n     <>\n  <li className=\"card\" id=\"card_1\">\n    <div className=\"card__content\">\n      <div>\n        <h2><i>\"I'm so thankful I can depend on you!\"</i></h2>\n        <p>-Joan from Minneapolis </p>\n\n      </div>\n      <figure>\n        <img src={card6} alt=\"Image description\" />\n      </figure>\n    </div>\n  </li>\n  <li className=\"card\" id=\"card_2\">\n    <div className=\"card__content\">\n      <div>\n        <h2><i>\"So appreciative of this service- I can finally get some errands done while I'm at work.\"</i></h2>\n        <p>-Brook from Scranton.</p>\n \n      </div>\n      <figure>\n        <img src={card3} alt=\"Image description\" />\n      </figure>\n    </div>\n  </li>\n  <li className=\"card\" id=\"card_3\">\n    <div className=\"card__content\">\n      <div>\n        <h2><i>\"Thank you so much for your help- it means the world.\"</i></h2>\n        <p>-Addie from Austin.</p>\n  \n      </div>\n      <figure>\n        <img src={card4} alt=\"Image description\" />\n      </figure>\n    </div>\n  </li>\n  <li className=\"card\" id=\"card_4\">\n    <div className=\"card__content\">\n      <div>\n        <h2><i>\"I love helping others throughout my day- I've also created amazing friendships!\"</i></h2>\n        <p>-Michael from Portland</p>\n     \n      </div>\n      <figure>\n        <img src={card13} alt=\"Image description\" />\n      </figure>\n    </div>\n  </li>\n  </>\n\n      \n  );\n};\n\n\n","export default __webpack_public_path__ + \"static/media/new-header.015038bc.jpg\";","export default __webpack_public_path__ + \"static/media/newsignup.163b8d15.jpeg\";","import React, { useState } from \"react\";\nimport Info from './InfoCards';\nimport '../homepg.css';\nimport backgroundImage from '../assets/new-header.jpg';\nimport signUp from '../assets/newsignup.jpeg';\nconst Home = () => {\n\n  return (\n    <>\n\n\n      <div className=\"fixed-bg\" style={{ backgroundImage: `url(${backgroundImage})` }}></div>\n      <main>\n        <aside >\n          <ul id=\"cards\" style={{ width: \"600px\", paddingLeft: 0 }}>\n            <Info />\n          </ul>\n        </aside>\n      </main>\n\n\n\n      <aside>\n        <div class=\"card\" id=\"card-about\">\n          <p><h7>Connect 2 Call is a platform utilized to assist others in making phone calls!\n            <br></br>\n            <br></br>Whether the reason be anxiety, language barriers, or available time, we help connect you to callers who are available, capable, and comfortable calling for you.</h7></p>\n\n        </div>\n\n\n        <div class=\"container\" id=\"container\">\n          <div class=\"form-container log-in-container\">\n            <form>\n              <h1>Welcome Back!</h1>\n              <br />\n\n              <input type=\"email\" placeholder=\"Email\" />\n              <input type=\"password\" placeholder=\"Password\" />\n\n              <button>Log In</button>\n            </form>\n          </div>\n          <div class=\"overlay-container\">\n            <div class=\"overlay\" style={{ backgroundImage: `url(${signUp})` }}>\n              <div class=\"overlay-panel overlay-right\">\n\n                <h4>New Here?</h4>\n\n                <p><h3>Sign up below to either make or request calls.</h3></p>\n                <br></br>\n\n                <a className=\"button\" href=\"/signupform\">\n                  <button>Sign Up</button>\n                </a>\n\n                <br />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </aside>\n    </>\n\n  );\n};\n\nexport default Home;\n","import React, { useState } from \"react\";\nimport '../homepg.css';\n\n\nfunction Footer() {\n  return (\n    <footer>\n\n      <ul className=\"list-inline\">\n        <li className=\"list-inline-item\"><a href=\"#\">Home</a></li>\n        <li className=\"list-inline-item\"><a href=\"#\">Login</a></li>\n        <li className=\"list-inline-item\"><a href=\"#\">Sign Up</a></li>\n\n      </ul>\n\n      <p className=\"copyright\">Connect 2 Call © 2022</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport { useState } from \"react\";\nimport pattern2 from \"../assets/pattern2.jpeg\";\nimport Home from \"../components/Home\";\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\nimport SignupForm from \"../components/SignupForm\";\nimport '../homepg.css';\n\nconst SignUpPage = () => {\n  const [content, setContent] = useState(\"Home\")\n  const handleChange = (content) => {\n    setContent(content)\n  }\n  const render = () => {\n    if (content === \"Home\") {\n      return <Home />\n    }\n\n    else if (content === \"Logout\") {\n      return <Home\n      />\n    }\n  }\n  return (\n    <>\n    <main>\n      <Header style = {{backgroundImage: `url(${pattern2})`}}\n        currentPage={content} changeFunction={handleChange}  />\n      \n     \n      {render(SignupForm)}\n      \n    \n      </main>\n      \n      </>\n    \n  )\n};\nexport default SignUpPage;","import React from 'react';\nimport { useState } from 'react';\nimport Header from '../components/Header';\nimport Home from '../components/Home';\nimport LoginForm from '../components/LoginForm'\nimport SignUpPage from '../pages/signUpPage';\nimport Footer from '../components/Footer';\n\nimport '../homepg.css';\nimport pattern2 from '../assets/pattern2.jpeg';\n\nconst MainHomePage = () => {\n  const [content, setContent] = useState(\"Home\")\n  const handleChange = (content) => {\n    setContent(content)\n  }\n  const render = () => {\n    if (content === \"Home\") {\n      return <Home />\n    }\n    else if (content === \"Login\") {\n      return <LoginForm\n      />\n    }\n    else if (content === \"SignUp\") {\n      return <SignUpPage />\n    }\n  }\n  return (\n    <>\n<main style = {{backgroundImage: `url(${pattern2})`}}>\n      <Header\n        currentPage={content} changeFunction={handleChange}\n      />\n   \n      {render()}\n    \n      <Footer />\n      </main>\n    </>\n  )\n};\nexport default MainHomePage;\n\n\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth'\nimport { ADD_POST } from '../utils/mutations';\nimport pattern2 from '../assets/pattern2.jpeg';\n\n// import Auth from '../utils/auth';\n\nconst NewPostForm = () => {\n    // set initial form state\n    const [postFormData, setPostFormData] = useState({ taskTitle: '', callLanguage: '', description: '', callCategory: '', payment: '', callTime: '', phoneNumberToCall: '', });\n    const [addPost, { error }] = useMutation(ADD_POST);\n    // set state for form validation\n    const [validated] = useState(true);\n    // set state for alert\n    const [showAlert, setShowAlert] = useState(false);\n\n\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        setPostFormData({ ...postFormData, [name]: value });\n    };\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n\n        // check if form has everything (as per react-bootstrap docs)\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        };\n\n        const loggedUser = Auth.getProfile();\n\n\n        try {\n            const { data } = await addPost({\n                variables: { ...postFormData, postUser: loggedUser.data._id }\n            });\n            console.log(data);\n\n            if (error) {\n                throw new Error('something went wrong!');\n            };\n\n\n        } catch (err) {\n            console.error(err);\n            setShowAlert(true);\n        };\n\n        setPostFormData({\n            taskTitle: '',\n            callLanguage: '',\n            description: '',\n            callCategory: '',\n            payment: '',\n            callTime: '',\n            phoneNumberToCall: '',\n        });\n    };\n\n    return (\n        <>\n            <div style={{ backgroundImage: `url(${pattern2})` }}>\n                <div className=\"sign-up-form\"></div>\n\n                {/* This is needed for the validation functionality above */}\n                <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n                    {/* show alert if server response is bad */}\n                    <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n                        Something went wrong with your signup!\n                    </Alert>\n\n                    <Form.Group>\n                        <Form.Label htmlFor='taskTitle'>taskTitle</Form.Label>\n                        <Form.Control\n                            type='text'\n                            placeholder='taskTitle'\n                            name='taskTitle'\n                            onChange={handleInputChange}\n                            value={postFormData.taskTitle}\n                            required\n                        />\n                        <Form.Control.Feedback type='invalid'>taskTitle is required!</Form.Control.Feedback>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor='callLanguage'> callLanguage</Form.Label>\n                        <Form.Control\n                            type='text'\n                            placeholder='callLanguage'\n                            name='callLanguage'\n                            onChange={handleInputChange}\n                            value={postFormData.callLanguage}\n                            required\n                        />\n                        <Form.Control.Feedback type='invalid'> callLanguage is required!</Form.Control.Feedback>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor='description'>description</Form.Label>\n                        <Form.Control\n                            type='text'\n                            placeholder='description'\n                            name='description'\n                            onChange={handleInputChange}\n                            value={postFormData.description}\n                            required\n                        />\n                        <Form.Control.Feedback type='invalid'>description is required!</Form.Control.Feedback>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor='callCategory'>callCategory</Form.Label>\n                        <Form.Control\n                            type='text'\n                            placeholder='callCategory'\n                            name='callCategory'\n                            onChange={handleInputChange}\n                            value={postFormData.callCategory}\n                            required\n                        />\n                        <Form.Control.Feedback type='invalid'>callCategory is required!</Form.Control.Feedback>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor='payment'>payment</Form.Label>\n                        <Form.Control\n                            type='text'\n                            placeholder='payment'\n                            name='payment'\n                            onChange={handleInputChange}\n                            value={postFormData.payment}\n                            required\n                        />\n                        <Form.Control.Feedback type='invalid'>payment is required!</Form.Control.Feedback>\n                    </Form.Group>\n\n\n\n                    <Form.Group>\n                        <Form.Label htmlFor='callTime'>callTime</Form.Label>\n                        <Form.Control\n                            type='text'\n                            placeholder='callTime'\n                            name='callTime'\n                            onChange={handleInputChange}\n                            value={postFormData.callTime}\n                            required\n                        />\n                        <Form.Control.Feedback type='invalid'>callTime is required!</Form.Control.Feedback>\n                    </Form.Group>\n\n\n\n                    <Form.Group>\n                        <Form.Label htmlFor='phoneNumberToCall'>phoneNumberToCall</Form.Label>\n                        <Form.Control\n                            type='text'\n                            placeholder='phoneNumberToCall'\n                            name='phoneNumberToCall'\n                            onChange={handleInputChange}\n                            value={postFormData.phoneNumberToCall}\n                            required\n                        />\n                        <Form.Control.Feedback type='invalid'>phoneNumberToCall is required!</Form.Control.Feedback>\n                    </Form.Group>\n\n\n\n                    <Button\n                        disabled={!(postFormData.taskTitle && postFormData.callLanguage && postFormData.description)}\n                        type='submit'\n                        variant='success'>\n                        Submit\n                    </Button>\n\n                    <Button\n                        disabled={!(postFormData.taskTitle && postFormData.callLanguage && postFormData.description)}\n                        type='edit'\n                        variant='success'>\n                        Edit post\n                    </Button>\n\n                    <Button\n                        disabled={!(postFormData.taskTitle && postFormData.callLanguage && postFormData.description)}\n                        type='complited'\n                        variant='success'>\n                        Complited\n                    </Button>\n                </Form>\n            </div>\n        </>\n    );\n};\n\nexport default NewPostForm;","import { gql } from '@apollo/client';\n\n// export const GET_POST = gql`\n// query Post($postId: ID!) {\n//     post(postId: $postId) {\n//       taskTitle\n//       createdAt\n//       callLanguage\n//       description\n//       callCategory\n//       payment\n//       callTime\n//       phoneNumberToCall\n//       postUser {\n//         username\n//       }\n//       comments {\n//           _id\n//         commentText\n//         commentAuthor\n//         createdAt\n//       }\n//     }\n//   }`;\n\nexport const GET_POSTS = gql`\nquery Posts {\n  posts {\n    _id\n    taskTitle\n    createdAt\n    callLanguage\n    description\n    callCategory\n    payment\n    callTime\n    phoneNumberToCall\n      postUser {\n      username\n    }\n    completed\n    comments {\n      commentText\n      commentAuthor{\n        username\n      }\n      createdAt\n    }\n  }\n}\n`;\n\n\nexport const GET_USER = gql`\nquery Query($userId: String!) {\n  user(userId: $userId) {\n    username\n    email\n    password\n    siteLanguage\n    spokenLanguage\n    isCaller\n    rating\n  }\n}\n`;","import React, { useState } from \"react\";\nimport '../homepg.css';\nimport Auth from '../utils/auth'\nimport { useMutation, useQuery } from '@apollo/client';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { GET_POSTS, GET_USER } from \"../utils/queries\";\nimport NewPostForm from \"./NewPostForm\";\nimport { DELETE_POST, TOGGLE_COMPLETE, ADD_COMMENT } from \"../utils/mutations\";\n\n\nconst Card = () => {\n\n    const { loading, data } = useQuery(GET_POSTS);\n\n\n\n\n\n    const [deleteThisPost, { deleteError }] = useMutation(DELETE_POST);\n    const [commentFormData, setCommentFormData] = useState({ username: \"\", commentText: '', postId: '' });\n    const [addComment, { error }] = useMutation(ADD_COMMENT);\n    const [toggleComplete] = useMutation(TOGGLE_COMPLETE);\n    // set state for form validation\n    const [validated] = useState(true);\n    // set state for alert\n    const [showDeleteAlert, setDeleteShowAlert] = useState(false);\n    const [deletePostIdState, setDeletePostIdState] = useState(\"\")\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        setCommentFormData({ ...commentFormData, [name]: value });\n\n\n        console.log(commentFormData)\n    };\n\n    const deletePost = async (event) => {\n        const { id, user } = event.target.dataset;\n        const loggedUser = Auth.getProfile();\n\n        if (user === loggedUser.data._id) {\n            try {\n                const { data } = await deleteThisPost({\n                    variables: { postId: id, postUser: user }\n                });\n                console.log(data);\n\n            } catch (err) {\n                console.error(err);\n\n            };\n\n        } else {\n            setDeleteShowAlert(true)\n            setDeletePostIdState(id)\n            console.log(\"you must own this post\");\n        }\n    }\n\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n\n        // check if form has everything (as per react-bootstrap docs)\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        const loggedUser = Auth.getProfile()\n\n        const commentAuthorId = loggedUser.data._id\n\n        try {\n            const { data } = await addComment({\n                variables: { postId: event.target.dataset.postid, commentText: commentFormData.commentText, commentAuthor: commentAuthorId }\n            });\n            console.log(data);\n\n            if (error) {\n                throw new Error('something went wrong!');\n            }\n\n        } catch (err) {\n            console.error(err);\n        }\n\n        setCommentFormData({\n            commentText: ''\n        });\n\n\n        window.location.assign('/board');\n    };\n\n\n    const toggleAPostCompleted = async (event) => {\n        const { id } = event.target.dataset;\n        try {\n            const { data } = await toggleComplete({\n                variables: { postId: id }\n            });\n            console.log(data);\n\n        } catch (err) {\n            console.error(err);\n        };\n\n        window.location.assign('/board');\n    }\n\n\n    return (\n\n\n        <div>\n\n\n            {data ? data.posts.map((element, index) => {\n                return (\n\n\n                    <div key={element._id}>\n\n                        <h2> title: {element.taskTitle}</h2>\n                        <p>Username: {element.postUser.username}</p>\n                        <p>createdAt:{element.createdAt} </p>\n                        <p>Call Language: {element.callLanguage} </p>\n                        <p>Description: {element.description}</p>\n                        <p>Call Category: {element.callCategory}</p>\n                        <p>Payment: {element.payment}</p>\n                        <p>Phone Number: {element.phoneNumberToCall}</p>\n                        <button data-id={element._id} onClick={toggleAPostCompleted}>{element.completed ? \"This task has been completed\" : \"Mark as completed\"}</button>\n\n\n\n                        <p>Comments: {element.comments.length > 0 ? element.comments.map((comment) => {\n                            return (\n                                <div>\n                                    <div>Comment: {comment.commentText}</div>\n                                    <div>From: {comment.commentAuthor.username != null ? comment.commentAuthor.username : \"\"}</div>\n                                </div>\n                            )\n                        }) : <div>no comments</div>};</p>\n\n                        <span role=\"button\" tabIndex=\"0\" data-id={element._id} data-user={element.postUser} onClick={deletePost}>\n                            Delete This Post  X {showDeleteAlert && deletePostIdState === element._id ? \"You must own this post inorder to delete it\" : \"\"}\n                        </span>\n\n                        <Form onSubmit={handleFormSubmit} data-postId={element._id}>\n\n                            <Form.Group>\n                                <Form.Label htmlFor='comment'>Comment</Form.Label>\n                                <Form.Control\n                                    type='text'\n                                    placeholder='commentText'\n                                    name='commentText'\n                                    onChange={handleInputChange}\n                                    required\n                                />\n                                <Form.Control.Feedback type='invalid'>Comment is required!</Form.Control.Feedback>\n                            </Form.Group>\n\n\n\n                            <Button\n                                // disabled={!(commentFormData.commentText)}\n                                type='submit'\n                                variant='success'>\n                                Submit\n                            </Button>\n                        </Form>\n                    </div>\n\n\n\n                )\n            }) : <div>loading</div>}\n\n\n\n\n\n\n        </div>\n\n\n    );\n};\n\nexport default Card;","import React, { useState, useQuery } from \"react\";\nimport '../homepg.css';\nimport Card from './Card'\nimport NewPostForm from \"./NewPostForm\";\nimport { GET_POSTS } from '../utils/queries'\n\n\n\nfunction YourBoard() {\n  const [card, setCard] = useState([]);\n\n  // const { loading, data } = useQuery(GET_POSTS);\n\n\n\n\n  // Function to add a bucket list item\n  const addCardItem = (item) => {\n    console.log(\n      item\n    );\n    // Check to see if the item text is empty\n    if (!item.text) {\n      return;\n    };\n\n    // Add the new bucket list item to the existing array of objects\n    const newCard = [item, ...card];\n    console.log(newCard);\n\n    // Call setBucket to update state with our new set of bucket list items\n    setCard(newCard);\n  };\n\n  // Function to mark bucket list item as complete\n  const completeCardItem = (id) => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n    let updatedCard = card.map((item) => {\n      if (item.id === id) {\n        item.isComplete = !item.isComplete;\n      };\n      return item;\n    });\n\n    console.log(updatedCard);\n    setCard(updatedCard);\n  };\n\n  // Function to remove bucket list item and update state\n  const removeCardItem = (id) => {\n    const updatedCard = [...card].filter((item) => item.id !== id);\n\n    setCard(updatedCard);\n  };\n\n  // Function to edit the bucket list item\n  const editCardItem = (itemId, newValue) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      return;\n    };\n\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the if of the item that was clicked and if so we set it to a new value\n    setCard((prev) =>\n      prev.map((item) => (item.id === itemId ? newValue : item))\n    );\n  };\n\n  return (\n    <div>\n      <h1>What is on your bucket list?</h1>\n\n      <Card\n\n        card={card}\n        completeCardItem={completeCardItem}\n        removeCardItem={removeCardItem}\n        editCardItem={editCardItem}\n\n      // data={data}\n\n      ></Card>\n    </div>\n  );\n};\n\nexport default YourBoard;\n","import React from 'react';\nimport { useState } from 'react';\nimport Header from '../components/Header';\nimport Home from '../components/Home';\nimport Footer from '../components/Footer';\nimport NewPostForm from '../components/NewPostForm';\nimport Card from '../components/Card'\nimport YourBoard from '../components/YourBoard';\n\n\nconst boardPage = () => {\n\n  return (\n    <>\n\n\n      <YourBoard />\n\n\n    </>\n  )\n};\nexport default boardPage;\n\n\n","import React from 'react';\nimport {\n    ApolloClient,\n    InMemoryCache,\n    ApolloProvider,\n    createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport HomePage from './pages/home-page';\nimport SignupForm from './components/SignupForm'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Board from './pages/board'\nimport NewPostForm from './components/NewPostForm';\n\nimport './homepg.css';\n\nconst httpLink = createHttpLink({\n    uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n    const token = localStorage.getItem('id_token');\n    return {\n        headers: {\n            ...headers,\n            authorization: token ? `Bearer ${token}` : '',\n        },\n    };\n});\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache(),\n});\n\n\n// landing page\n\n// login/sign up\n\n// dashboard for caller full of posts\n\n// if noncaller - create new post option and posts already created\n\n// comments \n\n\nclass App extends React.Component {\n    render() {\n        return (\n            <ApolloProvider client={client}>\n                <Router>\n                    <div>\n\n                        <Header />\n                        <Routes>\n                            <Route\n                                path=\"/\"\n                                element={<HomePage />}\n                            />\n                            <Route\n                                path=\"/signupform\"\n                                element={<SignupForm />}\n                            />\n                            <Route\n                                path=\"/board\"\n                                element={<Board />}\n                            />\n                            <Route\n                                path=\"/new-post\"\n                                element={<NewPostForm />}\n                            />\n                        </Routes>\n                    </div>\n                </Router>\n           \n\n            </ApolloProvider>\n        );\n    }\n}\n\nexport default App;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// did we want to have a service worker? Anyone feel strong in making one?\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\n"],"sourceRoot":""}