{"version":3,"sources":["assets/pattern2.jpeg","utils/mutations.js","utils/auth.js","components/SignupForm.js","utils/emailValidation.js","i18n.js","assets/card6.jpeg","assets/card3.jpeg","assets/card4.jpeg","assets/card13.jpeg","components/InfoCards.js","assets/new-header.jpg","assets/newsignup.jpeg","components/Home.js","components/Header.js","components/Footer.js","pages/home-page.js","utils/queries.js","components/NewPostForm.js","components/Card.js","components/YourBoard.js","pages/board.js","App.js","index.js"],"names":["ADD_POST","gql","ADD_USER","ADD_COMMENT","DELETE_POST","TOGGLE_COMPLETE","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","SignupForm","useState","username","email","password","siteLanguage","spokenLanguage","isCaller","userFormData","setUserFormData","useMutation","addUser","error","usernameValidate","setUsernameValidate","emailValidate","setEmailValidate","passwordValidate","setPasswordValidate","spokenLanguageValidate","setSpokenLanguageValidate","useEffect","showAlert","setShowAlert","split","length","match","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","currentTarget","variables","data","console","log","Error","Auth","login","style","backgroundImage","pattern2","Form","className","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","Button","disabled","i18n","use","Backend","LanguageDetector","initReactI18next","init","debug","fallbackLng","saveMissing","backend","projectId","apiKey","Info","id","src","card6","alt","card3","card4","card13","Home","width","paddingLeft","class","signUp","href","Header","setSiteLanguage","currentLanguage","t","Footer","MainHomePage","GET_POSTS","NewPostForm","taskTitle","callLanguage","description","callCategory","payment","callTime","phoneNumberToCall","postFormData","setPostFormData","addPost","validated","loggedUser","getProfile","taskTitleValidate","setTaskTitleValidate","descriptionValidate","setDescriptionValidate","callCategoryValidate","setCallCategoryValidate","callTimeValidate","setCallTimeValidate","phoneNumberToCallValidate","setPhoneNumberToCallValidate","setCallLanguage","checkValidity","stopPropagation","postUser","_id","noValidate","Card","useQuery","loading","commentAuthorId","deleteThisPost","deleteError","commentText","postId","commentFormData","setCommentFormData","addComment","toggleComplete","deletePostIdState","setDeletePostIdState","deletePost","dataset","user","postid","commentAuthor","toggleAPostCompleted","posts","map","element","index","createdAt","onClick","completed","comments","comment","role","tabIndex","YourBoard","card","setCard","completeCardItem","updatedCard","item","isComplete","removeCardItem","filter","editCardItem","itemId","newValue","text","prev","BoardPage","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.617ec36b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pattern2.7d5dfb58.jpeg\";","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\n\n\nexport const ADD_POST = gql`\n  mutation addPost($taskTitle: String!, $callLanguage: String!, $description: String!, $callCategory: String, $payment: Int!, $callTime: String!, $phoneNumberToCall: String!, $postUser: String!) {\n    addPost(taskTitle: $taskTitle, callLanguage: $callLanguage, description: $description, callCategory: $callCategory, payment: $payment, callTime: $callTime, phoneNumberToCall: $phoneNumberToCall, postUser: $postUser ) {\n        _id\n        taskTitle\n        callLanguage\n        description\n        callCategory\n        payment\n        callTime\n        phoneNumberToCall\n       postUser{\n        _id\n       }\n\n      \n    }\n  }\n`;\n\nexport const ADD_USER = gql`\nmutation AddUser($username: String!, $email: String!, $password: String!, $siteLanguage: String, $spokenLanguage: String!, $isCaller: Boolean!) {\n  addUser(username: $username, email: $email, password: $password, siteLanguage: $siteLanguage, spokenLanguage: $spokenLanguage, isCaller: $isCaller) {\n       user {\n        _id\n        username\n        email\n        password\n        siteLanguage\n        spokenLanguage\n        isCaller\n      }\n      token\n  }\n}`;\n\n\nexport const ADD_COMMENT = gql`\nmutation AddComment($postId: String!, $commentText: String!, $commentAuthor: String!) {\n  addComment(postId: $postId, commentText: $commentText, commentAuthor: $commentAuthor) {\n    comments {\n      commentAuthor {\n        _id\n      }\n    }\n  }\n}`;\n\nexport const DELETE_POST = gql`\nmutation DeletePost($postId: String!) {\n  deletePost(postId: $postId) {\n   _id\n  }\n}`;\n\nexport const TOGGLE_COMPLETE = gql`\nmutation Mutation($postId: ID!) {\n  markAsCompleted(postId: $postId) {\n    _id\n  }\n}`;\n\n\n\n\n\n","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/board');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport pattern2 from '../assets/pattern2.jpeg';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { emailValidation } from '../utils/emailValidation';\nimport Header from '../components/Header';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '', siteLanguage: '', spokenLanguage: 'English', isCaller: false });\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n\n\n  const [usernameValidate, setUsernameValidate] = useState(false);\n  const [emailValidate, setEmailValidate] = useState(false);\n  const [passwordValidate, setPasswordValidate] = useState(false);\n  const [spokenLanguageValidate, setSpokenLanguageValidate] = useState(false);\n\n  useEffect(() => {\n\n  });\n\n\n  const [showAlert, setShowAlert] = useState(false);\n\n\n  useEffect(() => {\n\n    if (userFormData.username.split(\"\").length >= 5) {\n      setUsernameValidate(true)\n    } else {\n      setUsernameValidate(false)\n    }\n    if (emailValidation(userFormData.email)) {\n      setEmailValidate(true)\n    } else {\n      setEmailValidate(false)\n    }\n\n    if (userFormData.password.split(\"\").length >= 5) {\n      setPasswordValidate(true)\n    } else {\n      setPasswordValidate(false)\n    }\n    if (userFormData.spokenLanguage.split(\"\").length >= 2) {\n      setSpokenLanguageValidate(true)\n    } else {\n      setSpokenLanguageValidate(false)\n    }\n\n\n  });\n\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const booleanChange = (event) => {\n    const { name } = event.target;\n    setUserFormData({ ...userFormData, [name]: !userFormData.isCaller })\n    console.log(userFormData.isCaller)\n  }\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData }\n      });\n      console.log(data);\n\n      if (error) {\n        throw new Error('something went wrong!');\n      }\n\n\n      Auth.login(data.addUser.token);\n\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n      siteLanguage: '',\n      spokenLanguage: '',\n      isCaller: false,\n    });\n  };\n\n  return (\n    <>\n \n  <main style={{ backgroundImage: `url(${pattern2})` }}>\n    <Header />\n        \n        {/* <div style={{ backgroundImage: `url(${pattern2})` }}></div> */}\n         \n          <br></br>\n          {/* This is needed for the validation functionality above */}\n          <Form className=\"sign-up-form\" onSubmit={handleFormSubmit}>\n          <h1>Happy To Have You!</h1>\n          <br></br>\n            {/* show alert if server response is bad */}\n            <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n              Something went wrong with your signup!\n            </Alert>\n\n            <Form.Group>\n              <Form.Label htmlFor='username'>Username:</Form.Label>\n              <br></br>\n              <Form.Control\n                type='text'\n                placeholder='YOUR USERNAME'\n                name='username'\n                onChange={handleInputChange}\n                value={userFormData.username}\n                required\n              />\n              <Form.Control.Feedback type='invalid'>{!usernameValidate ? \"Username must be 5 characters or more.\" : \"\"}</Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label htmlFor='email'>Email:</Form.Label>\n              <br></br>\n              <Form.Control\n                type='email'\n                placeholder='EMAIL ADDRESS'\n                name='email'\n                onChange={handleInputChange}\n                value={userFormData.email}\n                required\n              />\n              <Form.Control.Feedback type='invalid'>{!emailValidate ? \"Must be a valid email.\" : \"\"}</Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label htmlFor='password'>Password:</Form.Label>\n              <br></br>\n              <Form.Control\n                type='password'\n                placeholder='PASSWORD'\n                name='password'\n                onChange={handleInputChange}\n                value={userFormData.password}\n                required\n              />\n              <Form.Control.Feedback type='invalid'>{!passwordValidate ? \"Password must be 5 characters or more.\" : \"\"}</Form.Control.Feedback>\n            </Form.Group>\n\n            {/* <Form.Group>\n              <Form.Label htmlFor='siteLanguage'>siteLanguage</Form.Label>\n              <Form.Control\n                type='text'\n                placeholder='siteLanguage'\n                name='siteLanguage'\n                onChange={handleInputChange}\n                value={userFormData.siteLanguage}\n                required\n              />\n              <Form.Control.Feedback type='invalid'>Site Language Preference is required.</Form.Control.Feedback>\n            </Form.Group> */}\n\n            <Form.Group>\n              <Form.Label htmlFor='spokenLanguage' onChange={handleInputChange} >Spoken Language:    \n                <select name='spokenLanguage'>\n                  <br></br>\n                  <option value=\"en\">English</option>\n                  <option value=\"es\">Español</option>\n                  <option value=\"ru\">Русский</option>\n\n                </select></Form.Label>\n              <br></br>\n              <Form.Control.Feedback type='invalid'>{!spokenLanguageValidate ? \"Please enter languages you speak.\" : \"\"}</Form.Control.Feedback>\n            </Form.Group>\n\n\n            <Form.Group>\n              <Form.Label htmlFor='isCaller'>I will be making calls.</Form.Label>\n              <br></br>\n              <Form.Control\n                type='checkbox'\n                name='isCaller'\n                onChange={booleanChange}\n              // value={userFormData.isCaller}\n              />\n              <br></br>\n              <h11>Yes!</h11>\n              <br></br>\n              <br></br>\n            </Form.Group>\n\n\n\n            <Button\n              disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n              type='submit'\n              variant='success'>\n              Submit\n            </Button>\n          </Form>\n        \n            \n\n        <footer className = \"footer2\">\n      <p className=\"copyright\">Connect 2 Call © 2022</p>\n      </footer>\n      \n      </main>\n    </>\n  );\n};\n\nexport default SignupForm;","export const emailValidation = (email) => {\n    let regexEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (email.match(regexEmail)) {\n        return true\n    }\n    return false\n}","import i18n from \"i18next\";\nimport Backend from \"i18next-locize-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\n\ni18n.use(Backend)\n\t.use(LanguageDetector)\n\t.use(initReactI18next)\n\t.init({\n\t\tdebug: true,\n\t\tfallbackLng: 'en',\n\t\tsaveMissing: true,\n\t\tbackend:{\n\t\t\tprojectId: 'e22b7440-de57-4984-9396-1cb0bddc6d4c',\n            apiKey: '0d5eed32-da11-4467-a298-c080005ed065'\n\t\t}\n\n\n\t\t});\nexport default i18n\n\n\n","export default __webpack_public_path__ + \"static/media/card6.9d451640.jpeg\";","export default __webpack_public_path__ + \"static/media/card3.7f5e9a03.jpeg\";","export default __webpack_public_path__ + \"static/media/card4.7be25e8f.jpeg\";","export default __webpack_public_path__ + \"static/media/card13.0457a26e.jpeg\";","import React from \"react\";\nimport \"../homepg.css\";\nimport card6 from '../assets/card6.jpeg'\nimport card3 from '../assets/card3.jpeg'\nimport card4 from '../assets/card4.jpeg'\nimport card13 from '../assets/card13.jpeg'\n\nexport default function Info() {\n    return (\n     <>\n  <li className=\"card\" id=\"card_1\">\n    <div className=\"card__content\">\n      <div>\n        <h2><i>\"I'm so thankful I can depend on you!\"</i></h2>\n        <p>-Joan from Minneapolis </p>\n\n      </div>\n      <figure>\n        <img src={card6} alt=\"Image description\" />\n      </figure>\n    </div>\n  </li>\n  <li className=\"card\" id=\"card_2\">\n    <div className=\"card__content\">\n      <div>\n        <h2><i>\"So appreciative of this service- I can finally get some errands done while I'm at work.\"</i></h2>\n        <p>-Brook from Scranton.</p>\n \n      </div>\n      <figure>\n        <img src={card3} alt=\"Image description\" />\n      </figure>\n    </div>\n  </li>\n  <li className=\"card\" id=\"card_3\">\n    <div className=\"card__content\">\n      <div>\n        <h2><i>\"Thank you so much for your help- it means the world.\"</i></h2>\n        <p>-Addie from Austin.</p>\n  \n      </div>\n      <figure>\n        <img src={card4} alt=\"Image description\" />\n      </figure>\n    </div>\n  </li>\n  <li className=\"card\" id=\"card_4\">\n    <div className=\"card__content\">\n      <div>\n        <h2><i>\"I love helping others throughout my day- I've also created amazing friendships!\"</i></h2>\n        <p>-Michael from Portland</p>\n     \n      </div>\n      <figure>\n        <img src={card13} alt=\"Image description\" />\n      </figure>\n    </div>\n  </li>\n  </>\n\n      \n  );\n};\n\n\n","export default __webpack_public_path__ + \"static/media/new-header.015038bc.jpg\";","export default __webpack_public_path__ + \"static/media/newsignup.163b8d15.jpeg\";","import React, { useState } from \"react\";\nimport Info from './InfoCards';\nimport '../homepg.css';\nimport backgroundImage from '../assets/new-header.jpg';\nimport signUp from '../assets/newsignup.jpeg';\nconst Home = () => {\n\n  return (\n    <>\n\n\n      <div className=\"fixed-bg\" style={{ backgroundImage: `url(${backgroundImage})` }}></div>\n      <main>\n        <aside >\n          <ul id=\"cards\" style={{ width: \"600px\", paddingLeft: 0 }}>\n            <Info />\n          </ul>\n        </aside>\n      </main>\n\n\n\n      <aside>\n        <div class=\"card\" id=\"card-about\">\n          <p><h7>Connect 2 Call is a platform utilized to assist others in making phone calls!\n            <br></br>\n            <br></br>Whether the reason be anxiety, language barriers, or available time, we help connect you to callers who are available, capable, and comfortable calling for you.</h7></p>\n\n        </div>\n\n\n        <div class=\"container1\" id=\"container1\">\n          <div class=\"form-container1 log-in-container1\">\n            <form1>\n              <h1>Welcome Back!</h1>\n              <br />\n\n              <input type=\"email\" placeholder=\"Email\" />\n              <input type=\"password\" placeholder=\"Password\" />\n\n              <button>Log In</button>\n            </form1>\n          </div>\n          <div class=\"overlay-container\">\n            <div class=\"overlay\" style={{ backgroundImage: `url(${signUp})` }}>\n              <div class=\"overlay-panel overlay-right\">\n\n                <h4>New Here?</h4>\n\n                <p><h3>Sign up below to either make or request calls.</h3></p>\n                <br></br>\n\n                <a1 className=\"button\" href=\"/signupform\">\n                  <button>Sign Up</button>\n                </a1>\n\n                <br />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </aside>\n    </>\n\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignupForm from './SignupForm';\nimport LoginForm from './LoginForm';\nimport Auth from '../utils/auth';\nimport '../homepg.css';\nimport { Form } from 'react-bootstrap';\n\nimport { useTranslation, Trans } from \"react-i18next\";\n\nimport \"../i18n\"\nimport { t } from 'i18next';\nimport Home from './Home';\n\nconst lngs = {\n  en: { nativeName: 'English' },\n  es: { nativeName: 'Spanish' }\n}\n\n\nfunction Header() {\n\n  // const { i18n } = useTranslation();\n\n\n  const [siteLanguage, setSiteLanguage] = useState({ siteLanguage: 'en' });\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setSiteLanguage({ ...siteLanguage, [name]: value });\n    localStorage.setItem(\"i18nextLng\", value);\n  };\n\n\n\n  useEffect(() => {\n    const currentLanguage = localStorage.getItem(\"i18nextLng\");\n    setSiteLanguage(currentLanguage)\n  });\n\n  return (\n\n    <>\n      <header>\n        <div className=\"header\">\n\n          <a className=\"button\" href=\"/\">\n            {t(\"Home\")}\n          </a>\n\n          <a className=\"button\" href=\"/\">\n            {t(\"Login\")}\n          </a>\n          <a className=\"button\" href=\"/signupform\">\n            {t(\"Sign Up\")}\n          </a>\n          <a className=\"button\" href=\"/board\">\n            {t(\"Board\")}\n          </a>\n          <a className=\"button\" href=\"/new-post\">\n            {t(\"New post\")}\n          </a>\n          <br />\n          <div id=\"site-language\">\n            <Form.Group id=\"site-language-form\">\n              <Form.Label id=\"site-language-form-label\" htmlFor='spokenLanguage'\n                onChange={handleInputChange}\n              >{t(\"Site Language\")}:\n                <select name='spokenLanguage'\n                // value={siteLanguage}\n                >\n                  <option value=\"en\">English</option>\n                  <option value=\"es\">Español</option>\n                  <option value=\"ru\">Русский</option>\n                </select></Form.Label>\n              <Form.Control.Feedback type='invalid'></Form.Control.Feedback>\n            </Form.Group>\n            {/* <div>\n              {Object.keys(lngs).map((lng)=>(\n                <button type=\"submit\" key={lng} \n                >{lngs[lng].nativeName}</button>\n              ))}\n            </div> */}\n          </div>\n\n        </div>\n\n\n\n\n      </header>\n\n    </>\n  );\n}\n\nexport default Header;","import React, { useState, useEffect } from \"react\";\nimport '../homepg.css';\n\nimport { useTranslation, Trans } from \"react-i18next\";\n\nimport \"../i18n\"\nimport { t } from 'i18next';\n\nconst lngs ={\n  en: { nativeName: 'English'},\n  es: { nativeName: 'Spanish'}\n}\n\n\nfunction Footer() {\n\n  \n  return (\n    <footer>\n\n      <ul className=\"list-inline\">\n        <li className=\"list-inline-item\"><a href=\"#\">{t(\"Home\")}</a></li>\n        <li className=\"list-inline-item\"><a href=\"#\">{t(\"Login\")}</a></li>\n        <li className=\"list-inline-item\"><a href=\"#\">{t(\"Sign Up\")}</a></li>\n\n      </ul>\n\n      <p className=\"copyright\">Connect 2 Call © 2022</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport { useState } from 'react';\nimport Header from '../components/Header';\nimport Home from '../components/Home';\nimport LoginForm from '../components/LoginForm'\nimport SignUpPage from '../pages/signUpPage';\nimport Footer from '../components/Footer';\n\nimport '../homepg.css';\nimport pattern2 from '../assets/pattern2.jpeg';\n\nconst MainHomePage = () => {\n\n\n  return (\n    <>\n      <main style={{ backgroundImage: `url(${pattern2})` }}>\n        <Header\n        />\n\n        <Home />\n        <Footer />\n      </main>\n    </>\n  )\n};\nexport default MainHomePage;\n\n\n","import { gql } from '@apollo/client';\n\n// export const GET_POST = gql`\n// query Post($postId: ID!) {\n//     post(postId: $postId) {\n//       taskTitle\n//       createdAt\n//       callLanguage\n//       description\n//       callCategory\n//       payment\n//       callTime\n//       phoneNumberToCall\n//       postUser {\n//         username\n//       }\n//       comments {\n//           _id\n//         commentText\n//         commentAuthor\n//         createdAt\n//       }\n//     }\n//   }`;\n\nexport const GET_POSTS = gql`\nquery Posts {\n  posts {\n    _id\n    taskTitle\n    createdAt\n    callLanguage\n    description\n    callCategory\n    payment\n    callTime\n    phoneNumberToCall\n      postUser {\n        _id\n      username\n    }\n    completed\n    comments {\n      commentText\n      commentAuthor{\n        username\n      }\n      createdAt\n    }\n  }\n}\n`;\n\n\nexport const GET_USER = gql`\nquery Query($userId: String!) {\n  user(userId: $userId) {\n    username\n    email\n    password\n    siteLanguage\n    spokenLanguage\n    isCaller\n    rating\n  }\n}\n`;","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth'\nimport { ADD_POST } from '../utils/mutations';\nimport pattern2 from '../assets/pattern2.jpeg';\n\n// import Auth from '../utils/auth';\n\nconst NewPostForm = () => {\n\n    const currentLanguage = localStorage.getItem(\"i18nextLng\");\n    // set initial form state\n    const [postFormData, setPostFormData] = useState({ taskTitle: '', callLanguage: '', description: '', callCategory: '', payment: 0, callTime: '', phoneNumberToCall: '', });\n    const [addPost, { error }] = useMutation(ADD_POST);\n    // set state for form validation\n    const [validated] = useState(true);\n    // set state for alert\n    const [showAlert, setShowAlert] = useState(false);\n\n    const loggedUser = Auth.getProfile();\n\n    const [taskTitleValidate, setTaskTitleValidate] = useState(false);\n    const [descriptionValidate, setDescriptionValidate] = useState(false);\n    const [callCategoryValidate, setCallCategoryValidate] = useState(false);\n    const [callTimeValidate, setCallTimeValidate] = useState(false);\n    const [phoneNumberToCallValidate, setPhoneNumberToCallValidate] = useState(false);\n\n    const [callLanguage, setCallLanguage] = useState(currentLanguage);\n\n\n\n\n\n\n\n    useEffect(() => {\n\n\n\n\n        if (callLanguage === \"en\") {\n            setCallLanguage(\"English\");\n        }\n        if (callLanguage === \"es\") {\n            setCallLanguage(\"Español\");\n        }\n        if (callLanguage === \"ru\") {\n            setCallLanguage(\"Русский\");\n        }\n\n        console.log(currentLanguage)\n        console.log(callLanguage)\n\n\n        console.log(callLanguage)\n\n        if (postFormData.taskTitle.split(\"\").length >= 1) {\n            setTaskTitleValidate(true)\n        } else {\n            setTaskTitleValidate(false)\n        }\n        if (postFormData.description.split(\"\").length >= 1) {\n            setDescriptionValidate(true)\n        } else {\n            setDescriptionValidate(false)\n        }\n        if (postFormData.callCategory.split(\"\").length >= 1) {\n            setCallCategoryValidate(true)\n        } else {\n            setCallCategoryValidate(false)\n        }\n        if (postFormData.callTime.split(\"\").length >= 1) {\n            setCallTimeValidate(true)\n        } else {\n            setCallTimeValidate(false)\n        }\n        if (postFormData.phoneNumberToCall.split(\"\").length >= 1) {\n            setPhoneNumberToCallValidate(true)\n        } else {\n            setPhoneNumberToCallValidate(false)\n        }\n\n    });\n\n\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        setPostFormData({ ...postFormData, [name]: value });\n\n        if (name === \"callLanguage\") {\n            setCallLanguage(value)\n        }\n\n    };\n\n    const handleFormSubmit = async (event) => {\n\n\n        console.log(loggedUser)\n\n        // if (loggedUser.data._id){\n\n\n\n        event.preventDefault();\n\n        // check if form has everything (as per react-bootstrap docs)\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        };\n\n\n        try {\n            const { data } = await addPost({\n                variables: { ...postFormData, postUser: loggedUser.data._id }\n            });\n            console.log(data);\n\n            if (error) {\n                console.log(error);\n                throw new Error('something went wrong!');\n            };\n\n\n        } catch (err) {\n            console.error(err);\n            setShowAlert(true);\n        };\n\n        window.location.assign('/board');\n\n\n        // }\n\n    };\n\n\n    return (\n        <>\n\n            <div className=\"container\">\n                <div style={{ backgroundImage: `url(${pattern2})` }}>\n\n\n                    {/* This is needed for the validation functionality above */}\n                    <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n                        {/* show alert if server response is bad */}\n                        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n                            Something went wrong with your signup!\n                        </Alert>\n\n                        <Form.Group>\n                            <Form.Label htmlFor='taskTitle'>taskTitle</Form.Label>\n                            <Form.Control\n                                type='text'\n                                placeholder='taskTitle'\n                                name='taskTitle'\n                                onChange={handleInputChange}\n                                value={postFormData.taskTitle}\n                                required\n                            />\n                            <Form.Control.Feedback type='invalid'>{!taskTitleValidate ? \"Please enter a task title\" : \"\"}</Form.Control.Feedback>\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label htmlFor='callLanguage' onChange={handleInputChange} >Call Language:\n                                <select name='callLanguage' value={callLanguage}>\n                                    <option value=\"English\">English</option>\n                                    <option value=\"Español\">Español</option>\n                                    <option value=\"Русский\">Русский</option>\n                                </select></Form.Label>\n                            <br></br>\n                            <Form.Control.Feedback type='invalid'></Form.Control.Feedback>\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label htmlFor='description'>description</Form.Label>\n                            <Form.Control\n                                type='text'\n                                placeholder='description'\n                                name='description'\n                                onChange={handleInputChange}\n                                value={postFormData.description}\n                                required\n                            />\n                            <Form.Control.Feedback type='invalid'>{!descriptionValidate ? \"Please enter a description\" : \"\"}</Form.Control.Feedback>\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label htmlFor='callCategory'>callCategory</Form.Label>\n                            <Form.Control\n                                type='text'\n                                placeholder='callCategory'\n                                name='callCategory'\n                                onChange={handleInputChange}\n                                value={postFormData.callCategory}\n                                required\n                            />\n                            <Form.Control.Feedback type='invalid'>{!callCategoryValidate ? \"Please enter a category\" : \"\"}</Form.Control.Feedback>\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label htmlFor='payment'>payment</Form.Label>\n                            <Form.Control\n                                type='float'\n                                name='payment'\n                                onChange={handleInputChange}\n                                value={postFormData.payment}\n                                required\n                            />\n                            <Form.Control.Feedback type='invalid'></Form.Control.Feedback>\n                        </Form.Group>\n\n\n\n                        <Form.Group>\n                            <Form.Label htmlFor='callTime'>callTime</Form.Label>\n                            <Form.Control\n                                type='text'\n                                placeholder='callTime'\n                                name='callTime'\n                                onChange={handleInputChange}\n                                value={postFormData.callTime}\n                                required\n                            />\n                            <Form.Control.Feedback type='invalid'>{!callTimeValidate ? \"Please enter a task call time (please specify time zone)\" : \"\"}</Form.Control.Feedback>\n                        </Form.Group>\n\n\n\n                        <Form.Group>\n                            <Form.Label htmlFor='phoneNumberToCall'>phoneNumberToCall</Form.Label>\n                            <Form.Control\n                                type='text'\n                                placeholder='phoneNumberToCall'\n                                name='phoneNumberToCall'\n                                onChange={handleInputChange}\n                                value={postFormData.phoneNumberToCall}\n                                required\n                            />\n                            <Form.Control.Feedback type='invalid'>{!phoneNumberToCallValidate ? \"Please enter a phone number to call\" : \"\"}</Form.Control.Feedback>\n                        </Form.Group>\n\n\n\n                        <Button\n                            disabled={!(postFormData.taskTitle && postFormData.description)}\n                            type='submit'\n                            variant='success'>\n                            Submit\n                        </Button>\n\n                    </Form>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default NewPostForm;","import React, { useState } from \"react\";\nimport '../homepg.css';\nimport Auth from '../utils/auth'\nimport { useMutation, useQuery } from '@apollo/client';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { GET_POSTS, GET_USER } from \"../utils/queries\";\nimport NewPostForm from \"./NewPostForm\";\nimport { DELETE_POST, TOGGLE_COMPLETE, ADD_COMMENT } from \"../utils/mutations\";\nimport Header from '../components/Header';\nimport pattern2 from \"../assets/pattern2.jpeg\";\n\n\nconst Card = () => {\n\n    const { loading, data } = useQuery(GET_POSTS);\n\n    const loggedUser = Auth.getProfile()\n\n    const commentAuthorId = loggedUser.data._id\n\n\n\n\n    const [deleteThisPost, { deleteError }] = useMutation(DELETE_POST);\n    const [commentFormData, setCommentFormData] = useState({ username: \"\", commentText: '', postId: '' });\n    const [addComment, { error }] = useMutation(ADD_COMMENT);\n    const [toggleComplete] = useMutation(TOGGLE_COMPLETE);\n    // set state for form validation\n    const [validated] = useState(true);\n    // set state for alert\n    // const [showDeleteAlert, setDeleteShowAlert] = useState(false);\n    const [deletePostIdState, setDeletePostIdState] = useState(commentAuthorId)\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        setCommentFormData({ ...commentFormData, [name]: value });\n    };\n\n\n  \n\n    const deletePost = async (event) => {\n        const { id, user } = event.target.dataset;\n        const loggedUser = Auth.getProfile();\n\n        if (user === loggedUser.data._id) {\n            try {\n                const { data } = await deleteThisPost({\n                    variables: { postId: id, postUser: user }\n                });\n                console.log(data);\n\n            } catch (err) {\n                console.error(err);\n            };\n\n        } else {\n            setDeletePostIdState(id)\n        }\n        window.location.assign('/board');\n    }\n\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n\n        // check if form has everything (as per react-bootstrap docs)\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n\n\n        try {\n            const { data } = await addComment({\n                variables: { postId: event.target.dataset.postid, commentText: commentFormData.commentText, commentAuthor: commentAuthorId }\n            });\n            console.log(data);\n\n            if (error) {\n                throw new Error('something went wrong!');\n            }\n\n        } catch (err) {\n            console.error(err);\n        }\n\n        setCommentFormData({\n            commentText: ''\n        });\n\n\n        window.location.assign('/board');\n    };\n\n\n    const toggleAPostCompleted = async (event) => {\n        const { id } = event.target.dataset;\n        try {\n            const { data } = await toggleComplete({\n                variables: { postId: id }\n            });\n            console.log(data);\n\n        } catch (err) {\n            console.error(err);\n        };\n\n        window.location.assign('/board');\n    }\n\n\n    return (\n\n        <>\n\n\n\n            {data ? data.posts.map((element, index) => {\n                return (\n                   \n                        //figure out how to inline cap the Language\n\n\n                    <div className=\"container\" key={element._id}>\n\n                        <h33> Call Needed: </h33><h22>{element.taskTitle}</h22>\n                        <p><u>Username:</u> {element.postUser.username}</p>\n                        <p><u>Created At:</u> {element.createdAt} </p>\n                        <p><u>Call Language:</u> {element.callLanguage} </p>     \n                        <p><u>Description:</u>{element.description}</p>\n                        <p><u>Call Category:</u> {element.callCategory}</p>\n                        <p><u>Payment:</u> {element.payment}</p>\n                        <p><u>Phone Number:</u> {element.phoneNumberToCall}</p>\n                        <button data-id={element._id} onClick={toggleAPostCompleted}>{element.completed ? \"This task has been completed\" : \"Mark as completed\"}</button>\n\n\n\n                        <p>Comments: {element.comments.length > 0 ? element.comments.map((comment) => {\n                            return (\n                                <div>\n                                    <div>Comment: <i>{comment.commentText}</i></div>\n                                    <div>From: {comment.commentAuthor.username != null ? comment.commentAuthor.username : \"\"}</div>\n                                </div>\n                            )\n                        }) : <div><i>No Comments</i></div>}</p>\n\n                        <span role=\"button\" tabIndex=\"0\" data-id={element._id} data-user={element.postUser._id} onClick={deletePost}>\n                            {deletePostIdState === element.postUser._id ? \"Delete This Post  X\" : \"\"}\n                        </span>\n\n                        <Form onSubmit={handleFormSubmit} data-postId={element._id}>\n\n                            <Form.Group>\n                                <Form.Label htmlFor='comment'>Comment:</Form.Label>\n                                <Form.Control\n                                    type='text'\n                                    placeholder='Enter Comment Here'\n                                    name='commentText'\n                                    onChange={handleInputChange}\n                                    required\n                                />\n                                <Form.Control.Feedback type='invalid'></Form.Control.Feedback>\n                            </Form.Group>\n\n\n\n                            <Button\n                                // disabled={!(commentFormData.commentText)}\n                                type='submit'\n                                variant='success'>\n                                Submit\n                            </Button>\n                        </Form>\n                    </div>\n\n\n\n                )\n            }) : <div>loading</div>}\n\n\n\n\n\n\n\n\n        </>\n    );\n};\n\nexport default Card;","import React, { useState, useQuery } from \"react\";\nimport Card from \"./Card\";\nimport NewPostForm from \"./NewPostForm\";\nimport { GET_POSTS } from \"../utils/queries\";\nimport BoardPage from \"../pages/board\";\nimport pattern2 from \"../assets/pattern2.jpeg\";\nimport Header from '../components/Header';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\n\n\nfunction YourBoard() {\n  const [card, setCard] = useState([]);\n\n  // const { loading, data } = useQuery(GET_POSTS);\n\n  // Function to add a bucket list item\n  const addCardItem = (item) => {\n    console.log(item);\n    // Check to see if the item text is empty\n    if (!item.text) {\n      return;\n    }\n\n    // Add the new bucket list item to the existing array of objects\n    const newCard = [item, ...card];\n    console.log(newCard);\n\n    // Call setBucket to update state with our new set of bucket list items\n    setCard(newCard);\n  };\n\n  // Function to mark bucket list item as complete\n  const completeCardItem = (id) => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n    let updatedCard = card.map((item) => {\n      if (item.id === id) {\n        item.isComplete = !item.isComplete;\n      }\n      return item;\n    });\n\n    console.log(updatedCard);\n    setCard(updatedCard);\n  };\n\n  // Function to remove bucket list item and update state\n  const removeCardItem = (id) => {\n    const updatedCard = [...card].filter((item) => item.id !== id);\n\n    setCard(updatedCard);\n  };\n\n  // Function to edit the bucket list item\n  const editCardItem = (itemId, newValue) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      return;\n    }\n\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the if of the item that was clicked and if so we set it to a new value\n    setCard((prev) =>\n      prev.map((item) => (item.id === itemId ? newValue : item))\n    );\n  };\n\n  return (\n    <>\n  \n\n\n   \n \n \n            <Card className=\"boardCards\"\n            card={card}\n            completeCardItem={completeCardItem}\n            removeCardItem={removeCardItem}\n            editCardItem={editCardItem}>\n       \n          </Card>\n\n          \n   \n\n      \n\n\n\n     \n\n        \n      \n\n     \n        \n\n        <footer className=\"footer2\">\n          <p className=\"copyright\">Connect 2 Call © 2022</p>\n        </footer>\n       \n        </>\n  );\n}\n\nexport default YourBoard;\n","import React from 'react';\nimport { useState } from 'react';\nimport Header from '../components/Header';\nimport Home from '../components/Home';\nimport Footer from '../components/Footer';\nimport LoginForm from '../components/LoginForm'\nimport SignUpPage from '../pages/signUpPage';\nimport YourBoard from '../components/YourBoard';\nimport '../homepg.css';\nimport pattern2 from '../assets/pattern2.jpeg';\n\n\n\nconst BoardPage = () => {\n  \n\n  \n  return (\n    <>\n       <div  style={{ backgroundImage: `url(${pattern2})` }}>\n    <main>\n      \n      <Header />\n\n        \n        <YourBoard />\n        \n      </main>\n\n      </div>\n      </>\n  )\n};\nexport default BoardPage;\n\n\n","import React, { useTransition } from 'react';\nimport {\n    ApolloClient,\n    InMemoryCache,\n    ApolloProvider,\n    createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport HomePage from './pages/home-page';\nimport SignupForm from './components/SignupForm'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Board from './pages/board'\nimport NewPostForm from './components/NewPostForm';\n\nimport './homepg.css';\n\nconst httpLink = createHttpLink({\n    uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n    const token = localStorage.getItem('id_token');\n    return {\n        headers: {\n            ...headers,\n            authorization: token ? `Bearer ${token}` : '',\n        },\n    };\n});\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache(),\n});\n\nclass App extends React.Component {\n    \n\n    render() {\n        return (\n            <ApolloProvider client={client}>\n                <Router>\n                    <div>\n\n                        {/* <Header /> */}\n                        <Routes>\n                            <Route\n                                path=\"/\"\n                                element={<HomePage />}\n                            />\n                            <Route\n                                path=\"/signupform\"\n                                element={<SignupForm />}\n                            />\n                            <Route\n                                path=\"/board\"\n                                element={<Board />}\n                            />\n                            <Route\n                                path=\"/new-post\"\n                                element={<NewPostForm />}\n                            />\n                        </Routes>\n                    </div>\n                </Router>\n           \n\n            </ApolloProvider>\n        );\n    }\n}\n\nexport default App;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// did we want to have a service worker? Anyone feel strong in making one?\n// import * as serviceWorker from './serviceWorker';\nimport \"./i18n\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\n"],"sourceRoot":""}