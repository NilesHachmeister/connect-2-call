{"version":3,"sources":["assets/pattern2.jpeg","utils/mutations.js","utils/auth.js","i18n.js","components/SignupForm.js","utils/emailValidation.js","components/LoginForm.js","assets/card6.jpeg","assets/card3.jpeg","assets/card4.jpeg","assets/card13.jpeg","components/InfoCards.js","assets/new-header.jpg","assets/newsignup.jpeg","components/Home.js","components/Header.js","components/Footer.js","pages/home-page.js","utils/queries.js","components/NewPostForm.js","components/Card.js","components/YourBoard.js","pages/board.js","App.js","index.js"],"names":["LOGIN_USER","gql","ADD_POST","ADD_USER","ADD_COMMENT","DELETE_POST","TOGGLE_COMPLETE","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","i18n","use","Backend","LanguageDetector","initReactI18next","init","debug","fallbackLng","saveMissing","backend","projectId","apiKey","SignupForm","useState","username","email","password","siteLanguage","spokenLanguage","isCaller","userFormData","setUserFormData","useMutation","addUser","error","usernameValidate","setUsernameValidate","emailValidate","setEmailValidate","passwordValidate","setPasswordValidate","spokenLanguageValidate","setSpokenLanguageValidate","showAlert","setShowAlert","useEffect","split","length","match","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","currentTarget","variables","data","console","log","Error","Auth","login","style","backgroundImage","pattern2","Form","className","onSubmit","t","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","Button","disabled","LoginForm","validated","loginUser","checkValidity","stopPropagation","noValidate","id","Info","src","card6","alt","card3","card4","card13","Home","width","paddingLeft","class","signUp","href","Header","setSiteLanguage","currentLanguage","onClick","loggedIn","Footer","MainHomePage","GET_POSTS","NewPostForm","taskTitle","callLanguage","description","callCategory","payment","callTime","phoneNumberToCall","postFormData","setPostFormData","addPost","loggedUser","getProfile","taskTitleValidate","setTaskTitleValidate","descriptionValidate","setDescriptionValidate","callCategoryValidate","setCallCategoryValidate","callTimeValidate","setCallTimeValidate","phoneNumberToCallValidate","setPhoneNumberToCallValidate","setCallLanguage","postUser","_id","Card","useQuery","loading","commentAuthorId","deleteThisPost","deleteError","commentText","postId","commentFormData","setCommentFormData","addComment","toggleComplete","deletePostIdState","setDeletePostIdState","deletePost","dataset","user","postid","commentAuthor","toggleAPostCompleted","posts","map","element","index","createdAt","language","completed","comments","comment","role","tabIndex","YourBoard","card","setCard","completeCardItem","updatedCard","item","isComplete","removeCardItem","filter","editCardItem","itemId","newValue","text","prev","BoardPage","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d0c5a0e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pattern2.7d5dfb58.jpeg\";","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\n\n\nexport const ADD_POST = gql`\n  mutation addPost($taskTitle: String!, $callLanguage: String!, $description: String!, $callCategory: String, $payment: String!, $callTime: String!, $phoneNumberToCall: String!, $postUser: String!) {\n    addPost(taskTitle: $taskTitle, callLanguage: $callLanguage, description: $description, callCategory: $callCategory, payment: $payment, callTime: $callTime, phoneNumberToCall: $phoneNumberToCall, postUser: $postUser ) {\n        _id\n        taskTitle\n        callLanguage\n        description\n        callCategory\n        payment\n        callTime\n        phoneNumberToCall\n       postUser{\n        _id\n       }\n\n      \n    }\n  }\n`;\n\nexport const ADD_USER = gql`\nmutation AddUser($username: String!, $email: String!, $password: String!, $siteLanguage: String, $spokenLanguage: String!, $isCaller: Boolean!) {\n  addUser(username: $username, email: $email, password: $password, siteLanguage: $siteLanguage, spokenLanguage: $spokenLanguage, isCaller: $isCaller) {\n       user {\n        _id\n        username\n        email\n        password\n        siteLanguage\n        spokenLanguage\n        isCaller\n      }\n      token\n  }\n}`;\n\n\nexport const ADD_COMMENT = gql`\nmutation AddComment($postId: String!, $commentText: String!, $commentAuthor: String!) {\n  addComment(postId: $postId, commentText: $commentText, commentAuthor: $commentAuthor) {\n    comments {\n      commentAuthor {\n        _id\n      }\n    }\n  }\n}`;\n\nexport const DELETE_POST = gql`\nmutation DeletePost($postId: String!) {\n  deletePost(postId: $postId) {\n   _id\n  }\n}`;\n\nexport const TOGGLE_COMPLETE = gql`\nmutation Mutation($postId: ID!) {\n  markAsCompleted(postId: $postId) {\n    _id\n  }\n}`;\n\n\n\n\n\n","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/board');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import i18n from \"i18next\";\nimport Backend from \"i18next-locize-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\n\ni18n.use(Backend)\n\t.use(LanguageDetector)\n\t.use(initReactI18next)\n\t.init({\n\t\tdebug: true,\n\t\tfallbackLng: 'en',\n\t\tsaveMissing: true,\n\t\tbackend:{\n\t\t\tprojectId: 'e22b7440-de57-4984-9396-1cb0bddc6d4c',\n            apiKey: '0d5eed32-da11-4467-a298-c080005ed065'\n\t\t}\n\n\n\t\t});\nexport default i18n\n\n\n","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport pattern2 from '../assets/pattern2.jpeg';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { emailValidation } from '../utils/emailValidation';\nimport Header from '../components/Header';\n\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { Link } from 'react-router-dom';\nimport \"../i18n\"\nimport { t } from 'i18next';\nconst lngs = {\n  en: { nativeName: 'English' },\n  es: { nativeName: 'Spanish' }\n}\n\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '', siteLanguage: '', spokenLanguage: 'English', isCaller: false });\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n\n\n  const [usernameValidate, setUsernameValidate] = useState(false);\n  const [emailValidate, setEmailValidate] = useState(false);\n  const [passwordValidate, setPasswordValidate] = useState(false);\n  const [spokenLanguageValidate, setSpokenLanguageValidate] = useState(false);\n\n\n\n\n  const [showAlert, setShowAlert] = useState(false);\n\n\n  useEffect(() => {\n\n    if (userFormData.username.split(\"\").length >= 5) {\n      setUsernameValidate(true)\n    } else {\n      setUsernameValidate(false)\n    }\n    if (emailValidation(userFormData.email)) {\n      setEmailValidate(true)\n    } else {\n      setEmailValidate(false)\n    }\n\n    if (userFormData.password.split(\"\").length >= 5) {\n      setPasswordValidate(true)\n    } else {\n      setPasswordValidate(false)\n    }\n    if (userFormData.spokenLanguage.split(\"\").length >= 2) {\n      setSpokenLanguageValidate(true)\n    } else {\n      setSpokenLanguageValidate(false)\n    }\n\n\n  });\n\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const booleanChange = (event) => {\n    const { name } = event.target;\n    setUserFormData({ ...userFormData, [name]: !userFormData.isCaller })\n    console.log(userFormData.isCaller)\n  }\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData }\n      });\n      console.log(data);\n\n      if (error) {\n        throw new Error('something went wrong!');\n      }\n\n\n      Auth.login(data.addUser.token);\n\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n      siteLanguage: '',\n      spokenLanguage: '',\n      isCaller: false,\n    });\n  };\n\n  return (\n    <>\n\n      <main style={{ backgroundImage: `url(${pattern2})` }}>\n        <Header />\n\n\n\n        <br></br>\n        {/* This is needed for the validation functionality above */}\n        <Form className=\"sign-up-form\" onSubmit={handleFormSubmit}>\n          <h1>{t(\"Happy To Have You!\")}</h1>\n          <br></br>\n          {/* show alert if server response is bad */}\n          <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n            {t(\"Something went wrong with your signup!\")}\n          </Alert>\n\n          <Form.Group>\n            <Form.Label htmlFor='username'>{t(\"Username\")}:</Form.Label>\n            <br></br>\n            <Form.Control\n              type='text'\n              placeholder='YOUR USERNAME'\n              name='username'\n              onChange={handleInputChange}\n              value={userFormData.username}\n              required\n            />\n            <Form.Control.Feedback type='invalid'>{!usernameValidate ? \"Username must be 5 characters or more.\" : \"\"}</Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label htmlFor='email'>{t(\"Email\")}:</Form.Label>\n            <br></br>\n            <Form.Control\n              type='email'\n              placeholder='EMAIL ADDRESS'\n              name='email'\n              onChange={handleInputChange}\n              value={userFormData.email}\n              required\n            />\n            <Form.Control.Feedback type='invalid'>{!emailValidate ? \"Must be a valid email.\" : \"\"}</Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label htmlFor='password'>{t(\"Password\")}:</Form.Label>\n            <br></br>\n            <Form.Control\n              type='password'\n              placeholder='PASSWORD'\n              name='password'\n              onChange={handleInputChange}\n              value={userFormData.password}\n              required\n            />\n            <Form.Control.Feedback type='invalid'>{!passwordValidate ? \"Password must be 5 characters or more.\" : \"\"}</Form.Control.Feedback>\n          </Form.Group>\n\n          {/* <Form.Group>\n              <Form.Label htmlFor='siteLanguage'>siteLanguage</Form.Label>\n              <Form.Control\n                type='text'\n                placeholder='siteLanguage'\n                name='siteLanguage'\n                onChange={handleInputChange}\n                value={userFormData.siteLanguage}\n                required\n              />\n              <Form.Control.Feedback type='invalid'>Site Language Preference is required.</Form.Control.Feedback>\n            </Form.Group> */}\n\n          <Form.Group>\n            <Form.Label htmlFor='spokenLanguage' onChange={handleInputChange} >{t(\"Spoken Language\")}:\n              <select name='spokenLanguage'>\n                <br></br>\n                <option value=\"en\">English</option>\n                <option value=\"es\">Español</option>\n                <option value=\"ru\">Русский</option>\n\n              </select></Form.Label>\n            <br></br>\n            <Form.Control.Feedback type='invalid'>{!spokenLanguageValidate ? \"Please enter languages you speak.\" : \"\"}</Form.Control.Feedback>\n          </Form.Group>\n\n\n          <Form.Group>\n            <Form.Label htmlFor='isCaller'>{t(\"I will be making calls.\")}</Form.Label>\n            <br></br>\n            <Form.Control\n              type='checkbox'\n              name='isCaller'\n              onChange={booleanChange}\n            // value={userFormData.isCaller}\n            />\n            <br></br>\n            <h11>{t(\"Yes!\")}</h11>\n            <br></br>\n            <br></br>\n          </Form.Group>\n\n\n\n          <Button\n            disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n            type='submit'\n            variant='success'>\n            {t(\"Submit\")}\n          </Button>\n        </Form>\n\n\n\n        <footer className=\"footer2\">\n          <p className=\"copyright\">Connect 2 Call © 2022</p>\n        </footer>\n\n      </main>\n    </>\n  );\n};\n\nexport default SignupForm;","export const emailValidation = (email) => {\n    let regexEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (email.match(regexEmail)) {\n        return true\n    }\n    return false\n}","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { LOGIN_USER } from '../utils/mutations';\nimport { useMutation } from '@apollo/react-hooks';\n\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { Link } from 'react-router-dom';\nimport \"../i18n\"\nimport { t } from 'i18next';\n\nconst lngs = {\n  en: { nativeName: 'English' },\n  es: { nativeName: 'Spanish' }\n}\n\n\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [loginUser] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await loginUser({\n        variables: { ...userFormData }\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit} id=\"login-form\">\n        <h1>{t(\"Welcome Back!\")}</h1>\n        <br></br>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          {t(\"Something went wrong with your login credentials!\")}\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>{t(\"Email\")}:</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your Email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'></Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>{t(\"Password\")}:</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your Password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'></Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          {t(\"Submit\")}\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","export default __webpack_public_path__ + \"static/media/card6.9d451640.jpeg\";","export default __webpack_public_path__ + \"static/media/card3.7f5e9a03.jpeg\";","export default __webpack_public_path__ + \"static/media/card4.7be25e8f.jpeg\";","export default __webpack_public_path__ + \"static/media/card13.0457a26e.jpeg\";","import React from \"react\";\nimport \"../homepg.css\";\nimport card6 from '../assets/card6.jpeg'\nimport card3 from '../assets/card3.jpeg'\nimport card4 from '../assets/card4.jpeg'\nimport card13 from '../assets/card13.jpeg'\n\nimport { useTranslation, Trans } from \"react-i18next\";\n\nimport \"../i18n\"\nimport { t } from 'i18next';\nimport Home from './Home';\n\nconst lngs = {\n  en: { nativeName: 'English' },\n  es: { nativeName: 'Spanish' }\n}\n\n\n\nexport default function Info() {\n    return (\n     <>\n  <li className=\"card\" id=\"card_1\">\n    <div className=\"card__content\">\n      <div>\n    \n        <h2><i>\"I'm so thankful I can depend on you!\"</i></h2>\n        <p>-Joan from Minneapolis</p>\n\n      </div>\n      <figure>\n        <img src={card6} alt=\"Image description\" />\n      </figure>\n    </div>\n  </li>\n  <li className=\"card\" id=\"card_2\">\n    <div className=\"card__content\">\n      <div>\n        <h2><i>\"So appreciative of this service- I can finally get some errands done while I'm at work.\"</i></h2>\n        <p>-Brook from Scranton.</p>\n \n      </div>\n      <figure>\n        <img src={card3} alt=\"Image description\" />\n      </figure>\n    </div>\n  </li>\n  <li className=\"card\" id=\"card_3\">\n    <div className=\"card__content\">\n      <div>\n        <h2><i>\"Thank you so much for your help- it means the world.\"</i></h2>\n        <p>-Addie from Austin.</p>\n  \n      </div>\n      <figure>\n        <img src={card4} alt=\"Image description\" />\n      </figure>\n    </div>\n  </li>\n  <li className=\"card\" id=\"card_4\">\n    <div className=\"card__content\">\n      <div>\n        <h2><i>\"I love helping others throughout my day- I've also created amazing friendships!\"</i></h2>\n        <p>-Michael from Portland</p>\n     \n      </div>\n      <figure>\n        <img src={card13} alt=\"Image description\" />\n      </figure>\n    </div>\n  </li>\n  </>\n\n      \n  );\n};\n\n\n","export default __webpack_public_path__ + \"static/media/new-header.015038bc.jpg\";","export default __webpack_public_path__ + \"static/media/newsignup.163b8d15.jpeg\";","import React, { useState } from \"react\";\nimport Info from './InfoCards';\nimport '../homepg.css';\nimport backgroundImage from '../assets/new-header.jpg';\nimport signUp from '../assets/newsignup.jpeg';\nimport LoginForm from \"./LoginForm\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { Link } from 'react-router-dom';\nimport \"../i18n\"\nimport { t } from 'i18next';\n\nconst lngs = {\n  en: { nativeName: 'English' },\n  es: { nativeName: 'Spanish' }\n}\n\n\nconst Home = () => {\n\n\n\n\n\n\n\n\n\n  return (\n    <>\n\n\n      <div className=\"fixed-bg\" style={{ backgroundImage: `url(${backgroundImage})` }}></div>\n      <main>\n        <aside >\n          <ul id=\"cards\" style={{ width: \"600px\", paddingLeft: 0 }}>\n            <Info />\n          </ul>\n        </aside>\n      </main>\n\n\n\n      <aside>\n        <div class=\"card\" id=\"card-about\">\n          <p><h7>{t(\"Connect 2 Call is a platform utilized to assist others in making phone calls!\")}\n            <br></br>\n            <br></br>{t(\"Whether the reason be anxiety, language barriers, or available time, we help connect you to callers who are available, capable, and comfortable calling for you.\")}</h7></p>\n\n        </div>\n\n\n        <div class=\"container1\" id=\"container1\">\n          <div class=\"form-container1 log-in-container1\">\n\n            {/* <form id=\"login-form\">\n              <h1>{t(\"Welcome Back!\")}</h1>\n\n              <br />\n\n              <input type=\"email\" placeholder=\"Email\" />\n              <input type=\"password\" placeholder=\"Password\" />\n\n              <button>{t(\"Log In\")}</button>\n            </form> */}\n\n            < LoginForm />\n\n\n          </div>\n          <div class=\"overlay-container\">\n            <div class=\"overlay\" style={{ backgroundImage: `url(${signUp})` }}>\n              <div class=\"overlay-panel overlay-right\">\n\n                <h4>{t(\"New Here?\")}</h4>\n\n                <p><h3>{t(\"Sign up below to either make or request calls.\")}</h3></p>\n                <br></br>\n\n\n                <a href=\"/signupform\">\n                  <button>{t(\"Sign Up\")}</button>\n                </a>\n\n\n                <br />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </aside>\n    </>\n\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\n\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignupForm from './SignupForm';\nimport LoginForm from './LoginForm';\nimport Auth from '../utils/auth';\nimport '../homepg.css';\nimport { Form } from 'react-bootstrap';\nimport Home from './Home';\n\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { Link } from 'react-router-dom';\nimport \"../i18n\"\nimport { t } from 'i18next';\nconst lngs = {\n  en: { nativeName: 'English' },\n  es: { nativeName: 'Spanish' }\n}\n\n\nfunction Header() {\n\n  // const { i18n } = useTranslation();\n\n  const [siteLanguage, setSiteLanguage] = useState({ siteLanguage: 'en' });\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setSiteLanguage({ ...siteLanguage, [name]: value });\n    localStorage.setItem(\"i18nextLng\", value);\n    console.log(siteLanguage)\n    console.log(value)\n    console.log(localStorage.getItem(\"i18nextLng\"))\n  };\n\n\n  useEffect(() => {\n    const currentLanguage = localStorage.getItem(\"i18nextLng\");\n    setSiteLanguage({ siteLanguage: currentLanguage })\n    console.log(siteLanguage)\n  }, []);\n\n  const checkLogginForNewPost = () => {\n    if (Auth.loggedIn()) {\n      window.location.assign('/new-post');\n    } else {\n      window.location.assign('/#login-form')\n    }\n  };\n\n  const checkLogginForBoard = () => {\n    if (Auth.loggedIn()) {\n      window.location.assign('/board');\n    } else {\n      window.location.assign('/#login-form')\n    }\n  };\n\n\n\n  return (\n\n    <>\n      <header>\n        <div className=\"header\">\n\n          <a className=\"button\" href=\"/\">\n            {t(\"Home\")}\n          </a>\n\n          <a className=\"button\" href=\"/#login-form\">\n            {t(\"Login\")}\n          </a>\n          <a className=\"button\" href=\"/signupform\">\n            {t(\"Sign Up\")}\n          </a>\n          <a className=\"button\" onClick={checkLogginForBoard}>\n            {t(\"Board\")}\n          </a>\n          <a className=\"button\" onClick={checkLogginForNewPost}>\n            {t(\"New post\")}\n          </a>\n          <br />\n          <div id=\"site-language\">\n            <Form.Group id=\"site-language-form\">\n              <Form.Label id=\"site-language-form-label\" htmlFor='siteLanguage'\n                onChange={handleInputChange}\n              >{t(\"Site Language\")}:\n                <select name='siteLanguage'\n                  value={siteLanguage.siteLanguage}\n                >\n                  <option value=\"en\">English</option>\n                  <option value=\"es\">Español</option>\n                  <option value=\"ru\">Русский</option>\n                </select></Form.Label>\n              <Form.Control.Feedback type='invalid'></Form.Control.Feedback>\n            </Form.Group>\n            {/* <div>\n              {Object.keys(lngs).map((lng)=>(\n                <button type=\"submit\" key={lng} \n                >{lngs[lng].nativeName}</button>\n              ))}\n            </div> */}\n          </div>\n\n        </div>\n\n\n\n\n      </header>\n\n    </>\n  );\n}\n\nexport default Header;","import React, { useState, useEffect } from \"react\";\nimport '../homepg.css';\nimport Home from './Home';\n\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { Link } from 'react-router-dom';\nimport \"../i18n\"\nimport { t } from 'i18next';\n\nconst lngs = {\n  en: { nativeName: 'English' },\n  es: { nativeName: 'Spanish' }\n}\n\n\nfunction Footer() {\n\n\n  return (\n    <footer>\n\n      <ul className=\"list-inline\">\n        <li className=\"list-inline-item\"><a href=\"#\">{t(\"Home\")}</a></li>\n        <li className=\"list-inline-item\"><a href=\"#login-form\">{t(\"Login\")}</a></li>\n        <li className=\"list-inline-item\"><a href=\"/signupform\">{t(\"Sign Up\")}</a></li>\n\n      </ul>\n\n      <p className=\"copyright\">Connect 2 Call © 2022</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport { useState } from 'react';\nimport Header from '../components/Header';\nimport Home from '../components/Home';\nimport LoginForm from '../components/LoginForm'\nimport SignUpPage from '../pages/signUpPage';\nimport Footer from '../components/Footer';\n\nimport '../homepg.css';\nimport pattern2 from '../assets/pattern2.jpeg';\n\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { Link } from 'react-router-dom';\nimport \"../i18n\"\nimport { t } from 'i18next';\nconst lngs = {\n  en: { nativeName: 'English' },\n  es: { nativeName: 'Spanish' }\n}\n\nconst MainHomePage = () => {\n\n\n  return (\n    <>\n      <main style={{ backgroundImage: `url(${pattern2})` }}>\n        <Header\n        />\n\n        <Home />\n        <Footer />\n      </main>\n    </>\n  )\n};\nexport default MainHomePage;\n\n\n","import { gql } from '@apollo/client';\n\n// export const GET_POST = gql`\n// query Post($postId: ID!) {\n//     post(postId: $postId) {\n//       taskTitle\n//       createdAt\n//       callLanguage\n//       description\n//       callCategory\n//       payment\n//       callTime\n//       phoneNumberToCall\n//       postUser {\n//         username\n//       }\n//       comments {\n//           _id\n//         commentText\n//         commentAuthor\n//         createdAt\n//       }\n//     }\n//   }`;\n\nexport const GET_POSTS = gql`\nquery Posts {\n  posts {\n    _id\n    taskTitle\n    createdAt\n    callLanguage\n    description\n    callCategory\n    payment\n    callTime\n    phoneNumberToCall\n      postUser {\n        _id\n      username\n    }\n    completed\n    comments {\n      commentText\n      commentAuthor{\n        username\n      }\n      createdAt\n    }\n  }\n}\n`;\n\n\nexport const GET_USER = gql`\nquery Query($userId: String!) {\n  user(userId: $userId) {\n    username\n    email\n    password\n    siteLanguage\n    spokenLanguage\n    isCaller\n    rating\n  }\n}\n`;","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth'\nimport { ADD_POST } from '../utils/mutations';\nimport pattern2 from '../assets/pattern2.jpeg';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\n\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { Link } from 'react-router-dom';\nimport \"../i18n\"\nimport { t } from 'i18next';\n\nconst lngs = {\n    en: { nativeName: 'English' },\n    es: { nativeName: 'Spanish' }\n}\n\n// import Auth from '../utils/auth';\n\nconst NewPostForm = () => {\n\n    const currentLanguage = localStorage.getItem(\"i18nextLng\");\n    // set initial form state\n    const [postFormData, setPostFormData] = useState({ taskTitle: '', callLanguage: currentLanguage, description: '', callCategory: '', payment: '0', callTime: '', phoneNumberToCall: '', });\n    const [addPost, { error }] = useMutation(ADD_POST);\n    // set state for form validation\n    const [validated] = useState(true);\n    // set state for alert\n    const [showAlert, setShowAlert] = useState(false);\n\n    const loggedUser = Auth.getProfile();\n\n    const [taskTitleValidate, setTaskTitleValidate] = useState(false);\n    const [descriptionValidate, setDescriptionValidate] = useState(false);\n    const [callCategoryValidate, setCallCategoryValidate] = useState(false);\n    const [callTimeValidate, setCallTimeValidate] = useState(false);\n    const [phoneNumberToCallValidate, setPhoneNumberToCallValidate] = useState(false);\n\n    const [callLanguage, setCallLanguage] = useState(currentLanguage);\n\n\n\n\n\n\n\n    useEffect(() => {\n\n\n        if (postFormData.taskTitle.split(\"\").length >= 1) {\n            setTaskTitleValidate(true)\n        } else {\n            setTaskTitleValidate(false)\n        }\n        if (postFormData.description.split(\"\").length >= 1) {\n            setDescriptionValidate(true)\n        } else {\n            setDescriptionValidate(false)\n        }\n        if (postFormData.callCategory.split(\"\").length >= 1) {\n            setCallCategoryValidate(true)\n        } else {\n            setCallCategoryValidate(false)\n        }\n        if (postFormData.callTime.split(\"\").length >= 1) {\n            setCallTimeValidate(true)\n        } else {\n            setCallTimeValidate(false)\n        }\n        if (postFormData.phoneNumberToCall.split(\"\").length >= 1) {\n            setPhoneNumberToCallValidate(true)\n        } else {\n            setPhoneNumberToCallValidate(false)\n        }\n\n    });\n\n\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        setPostFormData({ ...postFormData, [name]: value });\n\n        if (name === \"callLanguage\") {\n            setCallLanguage(value)\n        }\n\n    };\n\n    const handleFormSubmit = async (event) => {\n\n\n        event.preventDefault();\n\n\n\n\n        // check if form has everything (as per react-bootstrap docs)\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        };\n\n\n        try {\n            const { data } = await addPost({\n                variables: { ...postFormData, postUser: loggedUser.data._id }\n            });\n            console.log(data);\n\n            if (error) {\n                console.log(error);\n                throw new Error('something went wrong!');\n            };\n\n\n        } catch (err) {\n            console.error(err);\n            setShowAlert(true);\n        };\n\n        // window.location.assign('/board');\n\n    };\n\n    return (\n        <>\n            <div style={{ backgroundImage: `url(${pattern2})` }}>\n                <Header />\n\n\n\n\n                {/* This is needed for the validation functionality above */}\n                <Form className=\"postform\" noValidate validated={validated} onSubmit={handleFormSubmit}>\n                    {/* show alert if server response is bad */}\n                    <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n                        {t(\"Something went wrong with your signup!\")}\n                    </Alert>\n\n                    <Form.Group>\n                        <Form.Label htmlFor='taskTitle'>{t(\"Task Title\")}</Form.Label>\n                        <Form.Control\n                            type='text'\n                            placeholder='TASK TITLE'\n                            name='taskTitle'\n                            onChange={handleInputChange}\n                            value={postFormData.taskTitle}\n                            required\n                        />\n                        <Form.Control.Feedback type='invalid'>{!taskTitleValidate ? \"Please enter a task title.\" : \"\"}</Form.Control.Feedback>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor='callLanguage' onChange={handleInputChange} >{t(\"Call Language\")}:\n                            <select name='callLanguage' value={callLanguage}>\n                                <option value=\"en\">English</option>\n                                <option value=\"es\">Español</option>\n                                <option value=\"ru\">Русский</option>\n                            </select></Form.Label>\n                        <br></br>\n                        <Form.Control.Feedback type='invalid'></Form.Control.Feedback>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor='description'>{t(\"Description\")}</Form.Label>\n                        <Form.Control\n                            type='text'\n                            placeholder='DESCRIPTION'\n                            name='description'\n                            onChange={handleInputChange}\n                            value={postFormData.description}\n                            required\n                        />\n                        <Form.Control.Feedback type='invalid'>{!descriptionValidate ? \"Please enter a description.\" : \"\"}</Form.Control.Feedback>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor='callCategory'>{t(\"Call Category\")}</Form.Label>\n                        <Form.Control\n                            type='text'\n                            placeholder='CALL CATEGORY'\n                            name='callCategory'\n                            onChange={handleInputChange}\n                            value={postFormData.callCategory}\n                            required\n                        />\n                        <Form.Control.Feedback type='invalid'>{!callCategoryValidate ? \"Please enter a category.\" : \"\"}</Form.Control.Feedback>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor='payment'>{t(\"Payment\")}</Form.Label>\n                        <Form.Control\n                            type='string'\n                            name='payment'\n                            onChange={handleInputChange}\n                            value={postFormData.payment}\n                            required\n                        />\n                        <Form.Control.Feedback type='invalid'></Form.Control.Feedback>\n                    </Form.Group>\n\n\n\n                    <Form.Group>\n                        <Form.Label htmlFor='callTime'>{t(\"Call Time\")}</Form.Label>\n                        <Form.Control\n                            type='text'\n                            placeholder='CALL TIME'\n                            name='callTime'\n                            onChange={handleInputChange}\n                            value={postFormData.callTime}\n                            required\n                        />\n                        <Form.Control.Feedback type='invalid'>{!callTimeValidate ? \"Please enter a task call time (please specify time zone)\" : \"\"}</Form.Control.Feedback>\n                    </Form.Group>\n\n\n\n                    <Form.Group>\n                        <Form.Label htmlFor='phoneNumberToCall'>{t(\"Phone Number To Call\")}</Form.Label>\n                        <Form.Control\n                            type='text'\n                            placeholder='PHONE NUMBER'\n                            name='phoneNumberToCall'\n                            onChange={handleInputChange}\n                            value={postFormData.phoneNumberToCall}\n                            required\n                        />\n                        <Form.Control.Feedback type='invalid'>{!phoneNumberToCallValidate ? \"Please enter a phone number to call.\" : \"\"}</Form.Control.Feedback>\n                    </Form.Group>\n\n\n\n                    <Button\n                        disabled={!(postFormData.taskTitle && postFormData.description)}\n                        type='submit'\n                        variant='success'>\n                        {t(\"Submit\")}\n                    </Button>\n\n                </Form>\n                <footer className=\"footer2\">\n                    <p className=\"copyright\">Connect 2 Call © 2022</p>\n\n                </footer>\n            </div>\n\n        </>\n    );\n};\n\nexport default NewPostForm;","import React, { useState } from \"react\";\nimport '../homepg.css';\nimport Auth from '../utils/auth'\nimport { useMutation, useQuery, useLazyQuery } from '@apollo/client';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { GET_POSTS, GET_USER } from \"../utils/queries\";\nimport NewPostForm from \"./NewPostForm\";\nimport { DELETE_POST, TOGGLE_COMPLETE, ADD_COMMENT } from \"../utils/mutations\";\nimport Header from '../components/Header';\nimport pattern2 from \"../assets/pattern2.jpeg\";\n\nimport { Link } from 'react-router-dom';\nimport { useTranslation, Trans } from \"react-i18next\";\n\nimport \"../i18n\"\nimport { t } from 'i18next';\nconst lngs = {\n    en: { nativeName: 'English' },\n    es: { nativeName: 'Spanish' }\n}\n\n\n// import { QUERY_CHECKOUT } from '../../utils/queries';\n\nconst Card = () => {\n\n    const { loading, data } = useQuery(GET_POSTS);\n\n    const loggedUser = Auth.getProfile()\n\n    const commentAuthorId = loggedUser.data._id\n\n\n\n\n\n    const [deleteThisPost, { deleteError }] = useMutation(DELETE_POST);\n    const [commentFormData, setCommentFormData] = useState({ username: \"\", commentText: '', postId: '' });\n    const [addComment, { error }] = useMutation(ADD_COMMENT);\n    const [toggleComplete] = useMutation(TOGGLE_COMPLETE);\n    // set state for form validation\n    const [validated] = useState(true);\n    // set state for alert\n    // const [showDeleteAlert, setDeleteShowAlert] = useState(false);\n    const [deletePostIdState, setDeletePostIdState] = useState(commentAuthorId)\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        setCommentFormData({ ...commentFormData, [name]: value });\n    };\n\n\n\n\n    const deletePost = async (event) => {\n        const { id, user } = event.target.dataset;\n        const loggedUser = Auth.getProfile();\n\n        if (user === loggedUser.data._id) {\n            try {\n                const { data } = await deleteThisPost({\n                    variables: { postId: id, postUser: user }\n                });\n                console.log(data);\n\n            } catch (err) {\n                console.error(err);\n            };\n\n        } else {\n            setDeletePostIdState(id)\n        }\n        window.location.assign('/board');\n    }\n\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n\n        // check if form has everything (as per react-bootstrap docs)\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n\n\n        try {\n            const { data } = await addComment({\n                variables: { postId: event.target.dataset.postid, commentText: commentFormData.commentText, commentAuthor: commentAuthorId }\n            });\n            console.log(data);\n\n            if (error) {\n                throw new Error('something went wrong!');\n            }\n\n        } catch (err) {\n            console.error(err);\n        }\n\n        setCommentFormData({\n            commentText: ''\n        });\n\n\n        window.location.assign('/board');\n    };\n\n\n    const toggleAPostCompleted = async (event) => {\n        const { id } = event.target.dataset;\n        try {\n            const { data } = await toggleComplete({\n                variables: { postId: id }\n            });\n            console.log(data);\n\n        } catch (err) {\n            console.error(err);\n        };\n\n        window.location.assign('/board');\n    }\n\n    // const stripePay = async (event) => {\n    //     const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n    //     useEffect(() => {\n    //         if (data) {\n    //             stripePromise.then((res) => {\n    //                 res.redirectToCheckout({ sessionId: data.checkout.session });\n    //             });\n    //         }\n    //     }, [data]);\n    // }\n\n\n\n    const renderCallLang = (language) => {\n\n        if (language === \"en\" || language === \"en-US\") {\n            return \"English\";\n        }\n        if (language === \"es\") {\n            return \"Español\";\n        }\n        if (language === \"ru\") {\n            return \"Русский\";\n        }\n\n    };\n\n\n\n    return (\n\n        <>\n\n\n\n            {data ? data.posts.map((element, index) => {\n                return (\n\n                    //figure out how to inline cap the Language\n\n\n                    <div className=\"container\" key={element._id}>\n\n\n                        <h33> {t(\"Call Needed\")}: </h33><h22>{element.taskTitle}</h22>\n                        <p><u>{t(\"Username\")}:</u> {element.postUser.username}</p>\n                        <p><u>{t(\"Created At\")}:</u> {element.createdAt} </p>\n                        <p><u>{t(\"Call Language\")}:</u> {renderCallLang(element.callLanguage)} </p>\n                        <p><u>{t(\"Description\")}:</u>{element.description}</p>\n                        <p><u>{t(\"Call Category\")}:</u> {element.callCategory}</p>\n                        <p><u>{t(\"Payment\")}:</u> ${element.payment}</p>\n                        <p><u>{t(\"Phone Number\")}:</u> {element.phoneNumberToCall}</p>\n\n                        <button data-id={element._id} onClick={toggleAPostCompleted}>{element.completed ? \"This task has been completed\" : \"Mark as completed\"}</button>\n\n\n\n                        <p>{t(\"Comments\")}: {element.comments.length > 0 ? element.comments.map((comment) => {\n                            return (\n                                <div>\n                                    <div>{t(\"Comment\")}: <i>{comment.commentText}</i></div>\n                                    <div>{t(\"From\")}: {comment.commentAuthor.username != null ? comment.commentAuthor.username : \"\"}</div>\n                                </div>\n                            )\n                        }) : <div><i>{t(\"No Comments\")}</i></div>}</p>\n\n                        <span role=\"button\" tabIndex=\"0\" data-id={element._id} data-user={element.postUser._id} onClick={deletePost}>\n                            {deletePostIdState === element.postUser._id ? \"Delete This Post  X\" : \"\"}\n                        </span>\n\n                        <Form onSubmit={handleFormSubmit} data-postId={element._id}>\n\n                            <Form.Group>\n                                <Form.Label htmlFor='comment'>{t(\"Comment\")}:</Form.Label>\n                                <Form.Control\n                                    type='text'\n                                    placeholder='Enter Comment Here'\n                                    name='commentText'\n                                    onChange={handleInputChange}\n                                    required\n                                />\n                                <Form.Control.Feedback type='invalid'></Form.Control.Feedback>\n                            </Form.Group>\n\n\n\n                            <Button\n                                // disabled={!(commentFormData.commentText)}\n                                type='submit'\n                                variant='success'>\n                                {t(\"Submit\")}\n                            </Button>\n                        </Form>\n                    </div>\n\n\n\n                )\n            }) : <div>loading</div>}\n\n\n\n\n\n\n\n\n        </>\n    );\n};\n\nexport default Card;","import React, { useState, useQuery } from \"react\";\nimport Card from \"./Card\";\nimport NewPostForm from \"./NewPostForm\";\nimport { GET_POSTS } from \"../utils/queries\";\nimport BoardPage from \"../pages/board\";\nimport pattern2 from \"../assets/pattern2.jpeg\";\nimport Header from '../components/Header';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\n\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { Link } from 'react-router-dom';\nimport \"../i18n\"\nimport { t } from 'i18next';\nconst lngs = {\n  en: { nativeName: 'English' },\n  es: { nativeName: 'Spanish' }\n}\n\n\nfunction YourBoard() {\n  const [card, setCard] = useState([]);\n\n  // const { loading, data } = useQuery(GET_POSTS);\n\n  // Function to add a bucket list item\n  const addCardItem = (item) => {\n    console.log(item);\n    // Check to see if the item text is empty\n    if (!item.text) {\n      return;\n    }\n\n    // Add the new bucket list item to the existing array of objects\n    const newCard = [item, ...card];\n    console.log(newCard);\n\n    // Call setBucket to update state with our new set of bucket list items\n    setCard(newCard);\n  };\n\n  // Function to mark bucket list item as complete\n  const completeCardItem = (id) => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n    let updatedCard = card.map((item) => {\n      if (item.id === id) {\n        item.isComplete = !item.isComplete;\n      }\n      return item;\n    });\n\n    console.log(updatedCard);\n    setCard(updatedCard);\n  };\n\n  // Function to remove bucket list item and update state\n  const removeCardItem = (id) => {\n    const updatedCard = [...card].filter((item) => item.id !== id);\n\n    setCard(updatedCard);\n  };\n\n  // Function to edit the bucket list item\n  const editCardItem = (itemId, newValue) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      return;\n    }\n\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the if of the item that was clicked and if so we set it to a new value\n    setCard((prev) =>\n      prev.map((item) => (item.id === itemId ? newValue : item))\n    );\n  };\n\n  return (\n    <>\n  \n      <Header />\n\n   \n \n \n            <Card className=\"boardCards\"\n            card={card}\n            completeCardItem={completeCardItem}\n            removeCardItem={removeCardItem}\n            editCardItem={editCardItem}>\n       \n          </Card>\n\n          \n   \n\n      \n\n\n\n     \n\n        \n      \n\n     \n        \n\n        <footer className=\"footer2\">\n          <p className=\"copyright\">Connect 2 Call © 2022</p>\n        </footer>\n       \n        </>\n  );\n}\n\nexport default YourBoard;\n","import React from 'react';\nimport { useState } from 'react';\nimport Header from '../components/Header';\nimport Home from '../components/Home';\nimport Footer from '../components/Footer';\nimport LoginForm from '../components/LoginForm'\nimport SignUpPage from '../pages/signUpPage';\nimport YourBoard from '../components/YourBoard';\nimport '../homepg.css';\nimport pattern2 from '../assets/pattern2.jpeg';\n\n\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { Link } from 'react-router-dom';\nimport \"../i18n\"\nimport { t } from 'i18next';\nconst lngs = {\n  en: { nativeName: 'English' },\n  es: { nativeName: 'Spanish' }\n}\n\n\nconst BoardPage = () => {\n  \n\n  \n  return (\n    <>\n       <div  style={{ backgroundImage: `url(${pattern2})` }}>\n    <main>\n      \n \n\n        \n        <YourBoard />\n        \n      </main>\n\n      </div>\n      </>\n  )\n};\nexport default BoardPage;\n\n\n","import React, { useTransition } from 'react';\nimport {\n    ApolloClient,\n    InMemoryCache,\n    ApolloProvider,\n    createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport HomePage from './pages/home-page';\nimport SignupForm from './components/SignupForm'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Board from './pages/board'\nimport NewPostForm from './components/NewPostForm';\n\nimport './homepg.css';\n\nconst httpLink = createHttpLink({\n    uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n    const token = localStorage.getItem('id_token');\n    return {\n        headers: {\n            ...headers,\n            authorization: token ? `Bearer ${token}` : '',\n        },\n    };\n});\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache(),\n});\n\nclass App extends React.Component {\n    \n\n    render() {\n        return (\n            <ApolloProvider client={client}>\n                <Router>\n                    <div>\n\n                        {/* <Header /> */}\n                        <Routes>\n                            <Route\n                                path=\"/\"\n                                element={<HomePage />}\n                            />\n                            <Route\n                                path=\"/signupform\"\n                                element={<SignupForm />}\n                            />\n                            <Route\n                                path=\"/board\"\n                                element={<Board />}\n                            />\n                            <Route\n                                path=\"/new-post\"\n                                element={<NewPostForm />}\n                            />\n                        </Routes>\n                    </div>\n                </Router>\n           \n\n            </ApolloProvider>\n        );\n    }\n}\n\nexport default App;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// did we want to have a service worker? Anyone feel strong in making one?\n// import * as serviceWorker from './serviceWorker';\nimport \"./i18n\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\n"],"sourceRoot":""}