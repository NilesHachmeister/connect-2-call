{"version":3,"sources":["assets/card6.jpeg","utils/mutations.js","utils/auth.js","components/SignupForm.js","components/Home.js","components/LoginForm.js","components/Header.js","components/Footer.js","pages/home-page.js","App.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","SignupForm","useState","name","email","password","siteLanguage","spokenLanguage","isCaller","category","userFormData","setUserFormData","useMutation","addUser","error","validated","showAlert","setShowAlert","handleInputChange","event","target","value","handleFormSubmit","preventDefault","currentTarget","checkValidity","stopPropagation","variables","data","console","log","Error","Auth","login","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","Button","disabled","Home","class","id","href","src","require","alt","action","LoginForm","username","loginUser","Header","Footer","MainHomePage","content","setContent","currentPage","changeFunction","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed5a5413.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/card6.9d451640.jpeg\";","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n\r\nexport const ADD_POST = gql`\r\n  mutation addPost($taskTitle: String!, $callLanguage: String!, $description: String!, $callCategory: String, $payment: String!, $callTime: String!, $phoneNumberToCall: String!, $postUser: String!) {\r\n    addPost(taskTitle: $taskTitle, callLanguage: $callLanguage, description: $description, callCategory: $callCategory, payment: $payment, callTime: $callTime, phoneNumberToCall: $phoneNumberToCall, postUser: $postUser ) {\r\n      \r\n        _id\r\n        taskTitle\r\n        callLanguage\r\n        description\r\n        callCategory\r\n        payment\r\n        callTime\r\n        phoneNumberToCall\r\n    postUser\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\nmutation AddUser($name: String!, $email: String!, $password: String!, $siteLanguage: String!, $spokenLanguage: String!, $isCaller: Boolean!) {\r\n  addUser(name: $name, email: $email, password: $password, siteLanguage: $siteLanguage, spokenLanguage: $spokenLanguage, isCaller: $isCaller) {\r\n       user {\r\n        _id\r\n        name\r\n        email\r\n        password\r\n        siteLanguage\r\n        spokenLanguage\r\n        isCaller\r\n        category\r\n      }\r\n      token\r\n  }\r\n}`;","// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { useMutation } from '@apollo/client';\r\n\r\nimport { ADD_USER } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ name: '', email: '', password: '', siteLanguage: '', spokenLanguage: '', isCaller: false, category: '' });\r\n  const [addUser, { error }] = useMutation(ADD_USER);\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const booleanChange = (event) => {\r\n    const { name } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: !userFormData.isCaller})\r\n    console.log(userFormData.isCaller)\r\n  }\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...userFormData }\r\n      });\r\n      console.log(data);\r\n\r\n      if (error) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n  \r\n      Auth.login(data.addUser.token);\r\n\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      name: '',\r\n      email: '',\r\n      password: '',\r\n      siteLanguage: '',\r\n      spokenLanguage: '',\r\n      isCaller: false,\r\n      category: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='name'>name</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your name'\r\n            name='name'\r\n            onChange={handleInputChange}\r\n            value={userFormData.name}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>name is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Your email address'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='siteLanguage'>siteLanguage</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='siteLanguage'\r\n            name='siteLanguage'\r\n            onChange={handleInputChange}\r\n            value={userFormData.siteLanguage}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>siteLanguage is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='spokenLanguage'>spokenLanguage</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='spokenLanguage'\r\n            name='spokenLanguage'\r\n            onChange={handleInputChange}\r\n            value={userFormData.spokenLanguage}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>spokenLanguage is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='isCaller'>isCaller</Form.Label>\r\n          <Form.Control\r\n            type='checkbox'\r\n            name='isCaller'\r\n            onChange={booleanChange}\r\n            // value={userFormData.isCaller}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>isCaller is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='category'>category</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='category'\r\n            name='category'\r\n            onChange={handleInputChange}\r\n            value={userFormData.category}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>category is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n\r\n\r\n\r\n\r\n        <Button\r\n          disabled={!(userFormData.name && userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;","import React, { useState } from \"react\";\r\nimport Testimonials from './Testimonials';\r\nimport '../homepg.css';\r\n\r\n\r\n\r\nconst Home = () => {\r\n  \r\n  return (\r\n   \r\n    <main>\r\n    <div class=\"fixed-bg\"></div>\r\n\r\n \r\n    <li class=\"card\" id=\"card_1\">\r\n\t\t\t<div class=\"card__content\">\r\n\t\t\t\t<div >\r\n\t\t\t\t\t<h2><i>\"I'm so thankful I can depend on you!\"</i></h2>\r\n\t\t\t\t\t<p>-Joan from Minneapolis </p>\r\n\t\t\t\t\t<p><a href=\"#top\" class=\"btn btn--accent\">Read more</a></p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<figure class >\r\n\t\t\t\t\t\r\n         < img src = {require('../assets/card6.jpeg')} alt = 'this is Joan'/>\r\n        \r\n\t\t\t\t</figure>\r\n\t\t\t</div>\r\n\t\t</li>\r\n    \r\n\r\n\r\n    <aside>\r\n      <div class=\"card\" id=\"card-about\">\r\n        <p>Blah Blah Blah....where we explain our App</p>\r\n        <br />\r\n      </div>\r\n\r\n      <div class=\"container\" id=\"container\">\r\n        <div class=\"form-container log-in-container\">\r\n          <form action=\"#\">\r\n            <h1>Welcome Back!</h1>\r\n            <br />\r\n\r\n            <input type=\"email\" placeholder=\"Email\" />\r\n            <input type=\"password\" placeholder=\"Password\" />\r\n\r\n            <button>Log In</button>\r\n          </form>\r\n        </div>\r\n        <div class=\"overlay-container\">\r\n          <div class=\"overlay\">\r\n            <div class=\"overlay-panel overlay-right\">\r\n              <h4>New Here?</h4>\r\n\r\n              <p>SIgn up below to either make or request calls.</p>\r\n              <button>Sign Up</button>\r\n              <br />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </aside>\r\n    </main>\r\n    \r\n  );\r\n};\r\n\r\nexport default Home;\r\n","// see SignupForm.js for comments\r\nimport React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport Auth from '../utils/auth';\r\nimport { LOGIN_USER } from '../utils/mutations';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: '', password: '', username: '' });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [loginUser] = useMutation(LOGIN_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await loginUser({\r\n        variables: {...userFormData} \r\n      });\r\n\r\n      Auth.login(data.login.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your email'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignupForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\nimport Auth from '../utils/auth';\r\n\r\n\r\nconst Header = () => {\r\n\r\n  return (\r\n    <>\r\n    <header>\r\n      <div class=\"header\">\r\n        <div class=\"header-right\">\r\n          <a class=\"button\" href=\"#home\">\r\n            Home\r\n          </a>\r\n          <a class=\"button\" href=\"#login\">\r\n            Login\r\n          </a>\r\n          <a class=\"button\" href=\"#signup\">\r\n            Sign Up\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </header>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n// const AppNavbar = () => {\r\n//   // set modal display state\r\n//   const [showModal, setShowModal] = useState(false);\r\n\r\n//   return (\r\n//     <>\r\n//       <Navbar bg='dark' variant='dark' expand='lg'>\r\n//         <Container fluid>\r\n//           <Navbar.Brand as={Link} to='/'>\r\n//             Google Books Search\r\n//           </Navbar.Brand>\r\n//           <Navbar.Toggle aria-controls='navbar' />\r\n//           <Navbar.Collapse id='navbar'>\r\n//             <Nav className='ml-auto'>\r\n//               <Nav.Link as={Link} to='/'>\r\n//                 Search For Books\r\n//               </Nav.Link>\r\n//               {/* if user is logged in show saved books and logout */}\r\n//               {Auth.loggedIn() ? (\r\n//                 <>\r\n//                   <Nav.Link as={Link} to='/saved'>\r\n//                     See Your Books\r\n//                   </Nav.Link>\r\n//                   <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n//                 </>\r\n//               ) : (\r\n//                 <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n//               )}\r\n//             </Nav>\r\n//           </Navbar.Collapse>\r\n//         </Container>\r\n//       </Navbar>\r\n//       {/* set modal data up */}\r\n//       <Modal\r\n//         size='lg'\r\n//         show={showModal}\r\n//         onHide={() => setShowModal(false)}\r\n//         aria-labelledby='signup-modal'>\r\n//         {/* tab container to do either signup or login component */}\r\n//         <Tab.Container defaultActiveKey='login'>\r\n//           <Modal.Header closeButton>\r\n//             <Modal.Title id='signup-modal'>\r\n//               <Nav variant='pills'>\r\n//                 <Nav.Item>\r\n//                   <Nav.Link eventKey='login'>Login</Nav.Link>\r\n//                 </Nav.Item>\r\n//                 <Nav.Item>\r\n//                   <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n//                 </Nav.Item>\r\n//               </Nav>\r\n//             </Modal.Title>\r\n//           </Modal.Header>\r\n//           <Modal.Body>\r\n//             <Tab.Content>\r\n//               <Tab.Pane eventKey='login'>\r\n//                 <LoginForm handleModalClose={() => setShowModal(false)} />\r\n//               </Tab.Pane>\r\n//               <Tab.Pane eventKey='signup'>\r\n//                 <SignupForm handleModalClose={() => setShowModal(false)} />\r\n//               </Tab.Pane>\r\n//             </Tab.Content>\r\n//           </Modal.Body>\r\n//         </Tab.Container>\r\n//       </Modal>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default AppNavbar;\r\n","import React, { useState } from \"react\";\r\n// import '../styles/homepg.css';\r\n\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer>\r\n          \r\n    <ul class=\"list-inline\">\r\n        <li class=\"list-inline-item\"><a href=\"#\">Home</a></li>\r\n        <li class=\"list-inline-item\"><a href=\"#\">Login</a></li>\r\n        <li class=\"list-inline-item\"><a href=\"#\">Sign Up</a></li>\r\n        <li class=\"list-inline-item\"><a href=\"#\">FAQ's</a></li>\r\n    </ul>\r\n\r\n    <p class=\"copyright\">Connect 2 Call © 2022</p>\r\n</footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Home from '../components/Home';\r\nimport LoginForm from '../components/LoginForm'\r\nimport SignupForm from '../components/SignupForm';\r\nimport Footer from '../components/Footer';\r\nimport Testimonials from '../components/Testimonials';\r\n\r\n\r\n\r\nconst MainHomePage = () => {\r\n  const [content, setContent] = useState(\"Home\")\r\n  const handleChange = (content) => {\r\n    setContent(content)\r\n  }\r\n  const render = () => {\r\n    if (content === \"Home\") {\r\n      return <Home />\r\n    }\r\n    else if (content === \"Login\") {\r\n      return <LoginForm\r\n      />\r\n    }\r\n    else if (content === \"SignUp\") {\r\n      return <SignupForm />\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Header\r\n        currentPage={content} changeFunction={handleChange}\r\n      />\r\n      {render()}\r\n      \r\n      <Footer />\r\n    </>\r\n  )\r\n};\r\nexport default MainHomePage;\r\n\r\n\r\n","import React from 'react';\r\nimport {\r\n    ApolloClient,\r\n    InMemoryCache,\r\n    ApolloProvider,\r\n    createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport SignupForm from './components/SignupForm';\r\nimport NewPostForm from './components/NewPostForm';\r\nimport Home from './components/Home';\r\nimport MainHomePage from './pages/home-page';\r\n\r\nimport './homepg.css';\r\nimport Testimonials from './components/Testimonials';\r\n\r\nconst httpLink = createHttpLink({\r\n    uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n    const token = localStorage.getItem('id_token');\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            authorization: token ? `Bearer ${token}` : '',\r\n        },\r\n    };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache(),\r\n});\r\n\r\n\r\n// landing page\r\n\r\n// login/sign up\r\n\r\n// dashboard for caller full of posts\r\n\r\n// if noncaller - create new post option and posts already created\r\n\r\n// comments \r\n\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n    return (\r\n        <ApolloProvider client={client}>\r\n            <Router>\r\n\r\n                <MainHomePage />\r\n          \r\n                {/* <NewPostForm /> */}\r\n\r\n            </Router>\r\n        </ApolloProvider>\r\n    );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n// did we want to have a service worker? Anyone feel strong in making one?\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.register();\r\n"],"sourceRoot":""}